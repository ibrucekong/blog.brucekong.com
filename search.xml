<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[UE 如何关闭自带的安卓屏幕按钮轮盘]]></title>
      <url>/posts/2171047824/</url>
      <content type="html"><![CDATA[<p><strong>UE 如何关闭自带的安卓屏幕按钮轮盘：</strong></p>
<p>一张图搞定</p>
<p><img src="https://www.zhreleven.com:18090/images/2023/07/31/UE-.png" alt="image-20230731193049781"></p>
<p><em>截图版本UE5.2</em></p>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>

]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UE4 </tag>
            
            <tag> UE5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle客户端安装配置]]></title>
      <url>/posts/1689051047/</url>
      <content type="html"><![CDATA[<p><strong>Oracle Client安装配置：</strong><br>直接安装ODT with ODAC失败，换之安装Oracle Client，再配置环境变量。</p>
<a id="more"></a>
<hr>
<p>比如安装32位的Oracle客户端：</p>
<blockquote>
<p>文件名称大致：win32_12201_client.zip</p>
<p>文件太大，放某云了，如果链接失效，留言或邮件我即可</p>
<p>链接: <a href="https://pan.baidu.com/s/1Cp-rB_1NFDxgDi4pV00jxQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Cp-rB_1NFDxgDi4pV00jxQ</a> 提取码: xpn4</p>
</blockquote>
<ol>
<li><p>解压，双击<code>setup.exe</code>。</p>
</li>
<li><p>等待安装索引文件，选择<code>管理员</code>模式</p>
</li>
<li><p>一路下一步，完成安装</p>
</li>
<li><p>配置环境变量及<code>tnsname.ora</code>文件（根据自己的安装路径配置）</p>
<ul>
<li><p>配置<code>ORACLE_HOME</code>指向Oracle的安装路径，客户端的比如<code>D:\app\client\Lenovo\product\18.0.0\client_1</code></p>
</li>
<li><p>配置<code>TNS_ADMIN</code>指向<code>D:\app\client\Lenovo\product\18.0.0\client_1\Network\Admin</code></p>
</li>
<li><p>添加<code>tnsname.ora</code>文件到<code>TNS_ADMIN</code>路径下，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ORCL_DATASOURCE =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS_LIST =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.123)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = ORCL)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ol start="5">
<li><p>从开始中找到<code>Oracle-....</code>文件夹中的<code>Net Manager</code>配置Oracle服务</p>
<ul>
<li>一次点击<code>Oracle Net配置</code>–<code>服务命名</code>，点击右侧的<code>+</code>新建一个服务配置</li>
<li>网络服务名：是在代码中配置的数据源名称，比如上面的<code>ORCL_DATASOURCE</code></li>
<li>默认<code>TCP/IP（Internet协议）</code></li>
<li>主机名：为安装Oracle服务器端的电脑IP，比如上面的<code>192.168.1.123</code></li>
<li>服务名：填写<code>orcl</code>即可，比如上面的<code>ORCL</code></li>
<li>下一步，点击<code>测试</code>，提示失败，点击右下角的<code>更改登录</code>，输入Oracle数据库的登录账号和密码（在安装Oracle时的账号），再测试</li>
</ul>
</li>
</ol>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> Oracle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Oracle Client </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[吾爱破解论坛2019年11月11日开放注册通知]]></title>
      <url>/posts/868241704/</url>
      <content type="html"><![CDATA[<p><strong>吾爱破解论坛注册喜讯：</strong><br>吾爱开放注册又又来了，此次是2019年第三次开放注册，在今年前两次未能成功上车的小伙伴，这次可要抓住了，又是正值周末，又是天时地利人和，赶快整理好自己的注册资料，期待“11.11”的到来吧。</p>
<a id="more"></a>
<div style="text-align: center;font-weight: bold;font-size: 2rem; color: red"><br>    喜讯、喜讯、喜讯<br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    <span>吾爱破解论坛开通开放注册</span><br>    <span>2019年11月11日12:00-14:00和20:00-22:00</span><br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px"><a href="https://www.52pojie.cn/?fromuid=575811" target="_blank" rel="noopener" style="text-align: center;">我要吾爱</a></div><br><div></div>

<p><strong><em>注册注意事项：</em></strong></p>
<ol>
<li>吸取上次上车失败的教训！！！</li>
<li>注意不要错过注册时间</li>
<li>认真读注册须知（需要等10分钟）</li>
<li>事先把注册信息写在本子或word里（独一无二的邮箱和用户名） <a href="https://www.52pojie.cn/misc.php?mod=faq&amp;action=faq&amp;id=15&amp;messageid=16" target="_blank" rel="noopener">需要准备什么</a></li>
<li>耐心检查填写内容（看是否都符合要求）</li>
<li>邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 <a href="https://www.52pojie.cn/thread-98585-1-1.html" target="_blank" rel="noopener">帮助</a></li>
<li>提醒一下，在注册成功后，要记得保持活跃度哦，不要只在官网签到，还要有互动（发帖、回复），不然会被清理的。</li>
</ol>
<div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    祝愿小伙伴们都能上车成功！<br></div><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 活动 </tag>
            
            <tag> 吾爱破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[吾爱破解论坛2019年07月21日开放注册通知]]></title>
      <url>/posts/4173973711/</url>
      <content type="html"><![CDATA[<p><strong>吾爱破解论坛注册喜讯：</strong><br>吾爱开放注册来了，此次是2019年第二次开放注册，在今年前一次未能成功上车的小伙伴，这次可要抓住了，又是正值周末，又是天时地利人和，赶快整理好自己的注册资料。</p>
<a id="more"></a>
<div style="text-align: center;font-weight: bold;font-size: 2rem; color: red"><br>    喜讯、喜讯、喜讯<br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    <span>吾爱破解论坛开通开放注册</span><br>    <span>2019年07月21日12:00-14:00和20:00-22:00</span><br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px"><a href="https://www.52pojie.cn/?fromuid=575811" target="_blank" rel="noopener" style="text-align: center;">我要吾爱</a></div><br><div></div>

<p><strong><em>注册注意事项：</em></strong></p>
<ol>
<li>吸取上次上车失败的教训！！！</li>
<li>注意不要错过注册时间</li>
<li>认真读注册须知（需要等10分钟）</li>
<li>事先把注册信息写在本子或word里（独一无二的邮箱和用户名） <a href="https://www.52pojie.cn/misc.php?mod=faq&amp;action=faq&amp;id=15&amp;messageid=16" target="_blank" rel="noopener">需要准备什么</a></li>
<li>耐心检查填写内容（看是否都符合要求）</li>
<li>邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 <a href="https://www.52pojie.cn/thread-98585-1-1.html" target="_blank" rel="noopener">帮助</a></li>
<li>提醒一下，在注册成功后，要记得保持活跃度哦，不要只在官网签到，还要有互动（发帖、回复），不然会被清理的。</li>
</ol>
<div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    祝愿小伙伴们都能获得自己的吾爱账号！<br></div><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 活动 </tag>
            
            <tag> 吾爱破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[监听事件多次绑定多次触发的解决方案]]></title>
      <url>/posts/353147208/</url>
      <content type="html"><![CDATA[<p><strong>事件监听多次绑定多次触发：</strong><br>对于同一DOM多次绑定同一监听事件，可导致绑定的函数触发多次，不满足冗余绑定容差错问题。想要的效果是多次绑定的情况下，在触发时只响应一次。</p>
<a id="more"></a>
<hr>
<p>在做项目时，遇到了有时地图不能拖动的问题，一开始以为是ArcGIS for JavaScript使用不当造成的，连调好长时间，发现代码并未有问题。加断点，写LOG，查看DOM触发时的代码走向。发现在绑定的函数中的LOG打印了多次，这很不正常啊。</p>
<p>思考出现多次的原因：1）DOM重复创建了；2）监听是不是多绑定了。</p>
<p>针对两个问题，检查发现确实是多次绑定导致的，首先想到的是方案一，查完资料找到了方案二。</p>
<ol>
<li><p>方案一</p>
<p>最简单的方法就是放在外围，不用每次都设置监听，这样做的好处是不用每次都去绑定，只在初始化时完成监听，增加了初始化时的运算量。</p>
</li>
<li><p>方案二</p>
<p>冲了会浪，找到另一个解决办法，这样可以根据什么时候需要设置监听而随时绑定，方法接着往下看~</p>
</li>
</ol>
<ul>
<li><p>问题示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'something is'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'circle'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    doSomeThing(e);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    doSomeThing(e);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上面的代码会在触发时执行两次，并不是我们想看到的，我们本想预料的是执行一次绑定的函数，完成时间监听的闭环。</p>
<ul>
<li><p>问题永远不会偶然并单独出现，你遇到了，别人肯定也会遇到，方案也会有很多，以下是别人的解决方案。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'something is'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'circle'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, doSomeThing, <span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, doSomeThing, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>在接收监听函数时使用实名函数，不要使用匿名函数，不然都没办法取消事件监听。</p>
<p><a href="https://stackoverflow.com/questions/26146108/addeventlistener-firing-multiple-times-for-the-same-handle-when-passing-in-argum" target="_blank" rel="noopener">网友的问题</a> </p>
</li>
</ul>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavasScript </tag>
            
            <tag> Event </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改Docker下的MySQL密码校验方式]]></title>
      <url>/posts/2058601592/</url>
      <content type="html"><![CDATA[<p><strong>Docker学习：</strong></p>
<p>由于MySQL在版本升级后，验证加密的方式改变了，在使用Navicat连接时会报错，因此下记录解决方法。</p>
<a id="more"></a>
<p>当使用docker的MySQL时，遇到了navicat无法连接mysql的情况，给出了两种解决方法，一是升级navicat驱动，暂时跳过该方法；二是修改mysql密码校验方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 首先启动docker的mysql数据库服务</span><br><span class="line">$ docker start docker-mysql</span><br><span class="line"># 进入docker-mysql的命令行模式</span><br><span class="line">$ docker exec -it docker-mysql bash</span><br><span class="line"># 默认进入root用户下</span><br><span class="line">$ root@921c40c1c9d6:&#x2F;#</span><br><span class="line"># 进入mysql命令，回车输入docker-mysql密码</span><br><span class="line">$ mysql -u root -p</span><br><span class="line"># 进入mysql数据库表</span><br><span class="line">$ use mysql;</span><br><span class="line"># 修改密码方式</span><br><span class="line">$ alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;your password&#39;;</span><br><span class="line"># 两次 exit 退出命令行界面</span><br></pre></td></tr></table></figure>
<p>使用Navicat连接mysql数据库成功。</p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker无法使用vim]]></title>
      <url>/posts/2392351684/</url>
      <content type="html"><![CDATA[<p><strong>Docker学习：</strong></p>
<p>从Docker仓库中下载的容器，由于需要进行自定义设置，但是环境却没有提供能编辑的功能，连VIM都未提供，记录在设置MySQL时遇到没有VIM环境的解决方法。</p>
<a id="more"></a>
<p>当使用docker的MySQL时，遇到了navicat无法连接mysql的情况，给出了两种解决方法;</p>
<ul>
<li>一是升级navicat驱动；</li>
<li>二是修改mysql密码校验方式。</li>
</ul>
<p>当时想看看mysql容器的配置文件，结果使用<code>vim</code>都报<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: vi: command not found</span><br></pre></td></tr></table></figure><br>显然是mysql基于的Linux容器没有安装vim，下面来联网安装一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 安装vim</span><br><span class="line">$ apt update</span><br><span class="line">$ apt install vim</span><br></pre></td></tr></table></figure><br>然后可以愉快的编辑了。</p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Splice和Slice引发的血案]]></title>
      <url>/posts/2464790768/</url>
      <content type="html"><![CDATA[<p><strong>一字千里，何况是在代码里：</strong></p>
<p>生活中一字之差，意思能千差万别，在代码中差了一字，运行结果更是差之千里。</p>
<a id="more"></a>
<p>在项目中遇到了对数据进行Copy，实现浅拷贝想到了用Slice，但是却错写成了Splice，引发了一系列问题。</p>
<p>下面借花献佛，讲解一下slice和splice的区别：</p>
<blockquote>
<p> slice(start,end)：方法可从已有数组中返回选定的元素，返回一个新数组，包含从start到end（不包含该元素）的数组元素。</p>
<p>注意：该方法不会改变原数组，而是返回一个子数组，如果想删除数组中的一段元素，应该使用Array.splice()方法。</p>
<p>start参数：必须，规定从何处开始选取，如果为负数，规定从数组尾部算起的位置，-1是指最后一个元素。<br>end参数：可选（如果该参数没有指定，那么切分的数组包含从start倒数组结束的所有元素，如果这个参数为负数，那么规定是从数组尾部开始算起的元素）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>));<span class="comment">//[2,3,4,5]  选择序列号从1到最后的所有元素组成的新数组。</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">//[2,3]  不包含end，序列号为3的元素</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>splice()：该方法向或者从数组中添加或者删除项目，返回被删除的项目。（该方法会改变原数组）</p>
<p>splice（index,howmany,item1,…itemX）</p>
<p>index参数：必须，整数，规定添加或者删除的位置，使用负数，从数组尾部规定位置。<br>howmany参数：必须，要删除的数量，如果为0，则不删除项目。<br>tem1,…itemX参数：可选，向数组添加的新项目。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"hello"</span>));<span class="comment">//[3]  返回的新数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1, 2, "hello", 4, 5]  改变了原数组</span></span><br></pre></td></tr></table></figure>
<p>原文：<a href="https://blog.csdn.net/xiaoqingpang/article/details/79108005" target="_blank" rel="noopener">https://blog.csdn.net/xiaoqingpang/article/details/79108005</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心得 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再见,我的青春 ——《请回答1988》]]></title>
      <url>/posts/139445933/</url>
      <content type="html"><![CDATA[<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/1988.jpg" alt=""><br></div>

<p><strong>暗恋终究有风险,但愿青春无悔：</strong></p>
<p>提起韩剧,很多人下意识会认为是无脑爱情剧,豆瓣评分也会很低,特别是对于只看美剧的男生来讲,漫威、DC的烧钱特效,好不过瘾,看韩剧简直就是天方夜谭。但是对于《请回答》系列的《请回答1988》,豆瓣评分及其之高,堪称神剧,不信来刷,我在第一集等你。</p>
<a id="more"></a>
<div style="text-align: center;"><img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/1988-douban.png" alt="1988"></div>

<p>《请回答1988》当前的豆瓣评分是<a href="https://movie.douban.com/subject/26302614/" target="_blank" rel="noopener">9.7</a>,该剧在官方定义中是一部爱情喜剧,而多数人在刷剧时,却硬生生的把喜剧刷成了泪目剧,每一集的感动时间就像美剧《Supernatural》中兄弟两个的感动时间一样(Hey, 美人丁)。此剧与2015年11月6日在韩国上映,是一部距离我们比较近的韩剧,而不是那种被冠以经典二字的老剧,不像《越狱》《行尸走肉》《权力的游戏》那么早就面世那么早,但是却同样拥有着巨大魔力俘获了众多人的心。</p>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/1988-all.png" alt="1988"></div>

<p>首次接触《请回答1988》是在2017年12月份,对于韩剧中的细腻(腻歪),不如美剧宏大场面看的那么爽、那么疯狂,而我又对剧很挑剔,看的美剧要么经典,要么上当时的TOP,所以对于韩剧稍微有点不待见的节奏。可是,看了《请回答1988》第一集过后,深陷其中,引人入胜,无法自拔。</p>
<p>最近用了半个月的时间二刷,在下班之余、睡前(害的熬夜)刷完,看的很过瘾。</p>
<div style="text-align: center;font-weight: bold;font-size: 1.5rem; color: red"><br>    以下是豆瓣相关链接<br></div><br>对于好剧好电影,在刷完之后总会去点评网站细细品味在观看时未能察觉到的、未能留意到的细节。下面从国内的豆瓣上摘取了一些经典评论,如果喜欢,并且不怕剧透的可以去品读下。<br><br><blockquote><a href="https://movie.douban.com/review/7743563/" target="_blank" rel="noopener">那一场无疾而终的暗恋-88恋爱解析–有片叶子(作者)</a><br><br>   1988对我来说不是一个爱情剧，它理所当然的应该是一个怀旧青春剧。<br>   在青春中，爱情只是其中的一部分，甚至在青春的爱情里，闪光的不是结局，而是那青涩懵懂的过程。<br><br>   18集毫无疑问是属于正焕的，雨中的独白，错过的时机，自我剖析的悔恨，正焕的爱情在独白中已经交代，而后餐厅借戒指的表白……<br></blockquote><br><br>看来大家的入笔都是从狗焕开始,毕竟青春爱情剧还是要有感情线,在这一个没有男主的剧中狗焕却是隐形的贯穿其中,狗焕的爱情从刚一开始到红灯亮起时就注定了暗恋风险太大,想要追悔依然天不助。<br><br><blockquote><a href="https://movie.douban.com/review/7676474/" target="_blank" rel="noopener">细数1988中的事件背景和人物 不断更新–作者(小柒)</a><br><br>   1988完结了，因为正焕不是最后的老公纷纷去打1分的你们，你们就忘记了刚开始看这部剧的时候给你们自己带来的感动了吗?<br></blockquote><br><br>答主开头就为该剧抱不平(都9.7分了,还不满意…是,不满意),表示为狗焕不是最后的老公而打1分的人的愤慨,然后晒出狗焕和德善剧中无缘,但现实却摆脱了狗的称谓,勇敢的向德善发起爱情宣言。并对每一集进行了剖析,指出每一集中的事件的背景和人物,对于如此用心良苦的编剧,点赞！<br><br><blockquote> <a href="https://movie.douban.com/review/7754487/" target="_blank" rel="noopener">神剧请回答1988埋的梗你看懂了多少–凰Suk(作者)</a><br><br>   其实个人并不建议想看少女心和爱情线的小伙伴们看1988，如果想看爱情喜剧那你大可以去找洪氏姐妹，想看成功商业爱情剧去找金编剧，而请回答系列，玩儿的一直是情怀，相比97和94，88表达的东西更多更杂也更贴近生活，这也是为什么88在韩网和内地平台上分数不如97和94，因为大部分人都想单纯地看看爱情线，冒冒粉红色泡泡。<br><br>   开始对剧中的梗进行分析……<br></blockquote><br><br>该答主剖析的梗很到位,开头先给出了看此剧的态度,说少女❤和爱情线的小伙不建议看,我是不赞同的,对于美好的事物每个人都有欣赏的权利,尽管是(单身)狗。<br><br><blockquote><a href="https://movie.douban.com/review/7741010/" target="_blank" rel="noopener">最后幸好是你–青木(作者)</a><br><br>   作为2015年韩国最受期待的现象级大剧《请回答1988》落下了帷幕。“正八”党没等来逆转，德善还是属于崔泽。这样的结局一度让“焕善党”把《88》推上了风口浪尖，他们不明白为什么前面的正牌男主到了后面基本沦为了男四，前面的铺垫，前面的伏笔，前面的勾勒，到后来连交代都省去喂了狗。于是质疑，诋毁就开始铺天盖地。<br>   我不属于“泽善粉”也不属于“焕善粉”，不过说实话最开始的时候，按照《请回答XX》这个系列的尿性，基本大家都认为老公应该是狗焕，我也这么认为，心底里最大的期望也不过是不要太虐阿泽，毕竟阿泽几乎是用出了下棋以外所有的时间和生命去爱着德善。但不知道为何心底里总有德善和阿泽在一起的希冀..<br></blockquote><br><br>答主首先喊出了弹幕中出现最多的两个党派“狗善党”、“泽善粉”,并对编剧把狗焕”丑帅”的人物刻画的轻车熟路表达了赞许。<br><br>说到党派站队,我还是倾向于站“焕善党”的,可能我是从狗焕的身上看到了太多自己的影子,认同感油然而生,勿拍砖。特别在最后,德善推门进来看到一群小伙伴再看英雄本色时,恍然如梦,顿时一怔,想到狗焕,若此为梦,可还木讷！<br><br>最后,特别要感谢一下《请回答1988》的编剧,简直神人,对人物内心的拿捏恰到好处;再者感谢剧中的每一位演员,神剧情没有演员的完美演绎也不会称为神剧;然后感谢那些还在为此剧疯狂的人,因为物以类聚,人以群分,对于好剧的感染力使得大家同在一个”屋檐下”。<br><br>从第一集又看到第一集,希望下一次的第一集有你一起看,我在第一集等你。<br><br><strong>断断续续的续…</strong><br><br><blockquote>搞怪的不是红绿灯，不是时机，而是我数不清的犹豫<br><br> “哎一古，成社长。哎一古，金社长。”<br><br> 德善的抖腿舞，啊哈哈<br><br> 三兄弟的《消防车》<br><br>咩～咩～咩～～～<br><br>冬天最温馨的事就是和《请回答》一起度过…<br><br>把最好的都给了朋友、兄弟和国家，狗焕你留下了啥…<br><br>男生站”狗善党“（看到自己的影子），女生站”泽善党“（女生的看法）<br><br>啊，1988的后劲太TM大了…<br><br>大人们只是在忍，只是在忙着大人们的事，只是在用故作坚强来承担年龄的重任，大人们也会疼。<br><br>永远没有顾客的凤凰堂，确实双门洞的最大赢者。<br><br>1988是一部后劲很大的剧。<br><br>1988里面没有坏人，如果非要说有，那就是时光。<br><br>娃娃鱼懂所有人，所有人却不懂娃娃鱼。<br><br></blockquote><br>歌单很多，大家网上找找&gt;&gt;&gt;&gt;<a href="https://music.163.com/#/playlist?id=2531631787" target="_blank" rel="noopener">〖请回答1988〗这几首就好了</a><br><br><br><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 韩剧 </tag>
            
            <tag> 请回答1988 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[吾爱破解论坛2018年11月11日开放注册通知]]></title>
      <url>/posts/3256505474/</url>
      <content type="html"><![CDATA[<p><strong>吾爱破解论坛注册喜讯：</strong><br>吾爱开放注册又又来了，此次是2018年第三次开放注册，在今年前两次未能成功上车的小伙伴，这次可要抓住了，又是正值周末，又是天时地利人和，赶快整理好自己的注册资料，期待“11.11”的到来吧。</p>
<a id="more"></a>
<div style="text-align: center;font-weight: bold;font-size: 2rem; color: red"><br>    喜讯、喜讯、喜讯<br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    <span>吾爱破解论坛开通开放注册</span><br>    <span>2018年11月11日12:00-14:00和20:00-22:00</span><br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px"><a href="https://www.52pojie.cn/?fromuid=575811" target="_blank" rel="noopener" style="text-align: center;">我要吾爱</a></div><br><div></div>

<p><strong><em>注册注意事项：</em></strong></p>
<ol>
<li>吸取上次上车失败的教训！！！</li>
<li>注意不要错过注册时间</li>
<li>认真读注册须知（需要等10分钟）</li>
<li>事先把注册信息写在本子或word里（独一无二的邮箱和用户名） <a href="https://www.52pojie.cn/misc.php?mod=faq&amp;action=faq&amp;id=15&amp;messageid=16" target="_blank" rel="noopener">需要准备什么</a></li>
<li>耐心检查填写内容（看是否都符合要求）</li>
<li>邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 <a href="https://www.52pojie.cn/thread-98585-1-1.html" target="_blank" rel="noopener">帮助</a></li>
<li>提醒一下，在注册成功后，要记得保持活跃度哦，不要只在官网签到，还要有互动（发帖、回复），不然会被清理的。</li>
</ol>
<div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    祝愿小伙伴们都能获得自己的吾爱账号！<br></div><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 活动 </tag>
            
            <tag> 吾爱破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[济南的中秋]]></title>
      <url>/posts/4186109665/</url>
      <content type="html"><![CDATA[<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/jinan-mid-autumn.png" alt=""><br></div>

<a id="more"></a>
<p><br ><br><br ><br><br ></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <span style="font-size: 3rem;color: #696969;background-image: -webkit-linear-gradient(92deg, #d4290e, #ff71fb);-webkit-background-clip: text;-webkit-text-fill-color: transparent;-webkit-animation: hue 60s infinite linear;">中秋一人</span><br></div><br><div style="text-align: center;padding: 0; margin: 0;"><br>    <span style="font-size: 3rem;color: #696969;background-image: -webkit-linear-gradient(92deg, #d4290e, #ff71fb);-webkit-background-clip: text;-webkit-text-fill-color: transparent;-webkit-animation: hue 60s infinite linear;">亦可三人成酒</span><br></div>

<p><br ></p>
<p><br ></p>
<p><br ></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 中秋 </tag>
            
            <tag> 济南 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BIMserver入门笔记 - 02登录及模型展示]]></title>
      <url>/posts/3230248873/</url>
      <content type="html"><![CDATA[<p><strong>BIMserver登录及模型展示：</strong><br>BIMserver资料较少，没有成熟的接口文档，没有成熟的示例程序，但是BIMserver为我们提供了一个运维程序、示例数据，在Github中的<a href="https://github.com/opensourceBIM" target="_blank" rel="noopener">opensourceBIM</a>这个开源组织，给开发者提供了不少源码级的学习内容。从运维程序中我们可以梳理出BIMserver的执行过程，方便我们二次开发。</p>
<a id="more"></a>
<ol>
<li><p><a href="../3869274485/">BIMserver入门笔记 - 01环境搭建、数据导入及预览</a></p>
</li>
<li><p>BIMserver入门笔记 - 02登录及模型展示</p>
</li>
</ol>
<p>从上一节我们了解了BIMserver的安装配置和运维的使用，但是在项目中我们不可能去直接用BIMserver的运行界面，需要我根据自己的项目需求来自定义自己的BIM展示界面和功能，所以我们就要从开发者角度去审视BIMserver。</p>
<h3 id="准备什么"><a href="#准备什么" class="headerlink" title="准备什么"></a>准备什么</h3><p>既然是开发者，前端就至少要懂前端的，后端至少要懂后端的，最好两者都熟悉。准备工作除了能搭建起BIMserver环境，还要有以下的几个特点（建议）：</p>
<ul>
<li>一件趁手的兵器——IDE（前端就WebStorm咯，涉及到后台就IDEA咯）</li>
<li>一个性能不错的本子——内存和CPU性能要好，关键还要有不错的显卡</li>
</ul>
<h3 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h3><ul>
<li><p>一个敢于钻研的劲头</p>
</li>
<li><p>一个不服输、有韧性的心</p>
</li>
</ul>
<p><em>新兴的技术或者前沿的技术，必要要耐得住性子</em></p>
<p>除了精神上的鼓舞，我还要掌握一些查资料的技能，特别是在对BIMserver二次开发中，资料少之又少，整个腾讯就两个群（一个群人数不超过一只手的手指头数）。另外官方也没有提供<code>Step by step</code>和接口文档，示例代码也是少的可怜，Stack Overflow、CSDN和博客园中资料也是凤毛麟角，所以二次开发的参考资料还是去查看官方的<a href="https://github.com/opensourceBIM/BIMserver/tree/parent-1.5.88/PluginBase/src/org/bimserver/shared/interfaces" target="_blank" rel="noopener">接口源码</a>，比如最常用的<a href="https://github.com/opensourceBIM/BIMserver/blob/parent-1.5.88/PluginBase/src/org/bimserver/shared/interfaces/ServiceInterface.java" target="_blank" rel="noopener">接口源码</a>。</p>
<h3 id="万里长征第一步"><a href="#万里长征第一步" class="headerlink" title="万里长征第一步"></a>万里长征第一步</h3><p>万事开头难，先起个<a href="https://github.com/ibrucekong/hellobim/" target="_blank" rel="noopener">Hellobim</a>吧！</p>
<h4 id="设计布局"><a href="#设计布局" class="headerlink" title="设计布局"></a>设计布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"maincontainer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"topsection"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hellobim<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contentwrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"colmid"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"colright"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"col1wrap"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"col1pad"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewerContainer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"treeContainer"</span> <span class="attr">class</span>=<span class="string">"bimsurfer-static-tree"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dataContainer"</span> <span class="attr">class</span>=<span class="string">"bimsurfer-metadata"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="变量配置"><a href="#变量配置" class="headerlink" title="变量配置"></a>变量配置</h4><p>由于JavaScript代码比较多，所以拆分成了三部分，一个是变量配置模块，一个是登录模块，一个是模型加载展示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> projectName = <span class="string">'test1'</span>; <span class="comment">// address地址下的BIMserver服务中必须有test1项目，而且还要有模型</span></span><br><span class="line"><span class="keyword">var</span> address = <span class="string">"http://192.168.1.116:8082"</span>; <span class="comment">// 这三个是在安装BIMserver时配置的地址、账户和密码</span></span><br><span class="line"><span class="keyword">var</span> account = <span class="string">"admin@163.com"</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="string">"1234567890"</span>;</span><br><span class="line"><span class="keyword">var</span> token, poid, lastRevisionId; <span class="comment">// 这三个是在模型加载时需要用到的</span></span><br><span class="line"><span class="keyword">var</span> metadata; <span class="comment">// 这是右侧元数据</span></span><br></pre></td></tr></table></figure>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录代码</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadFromBimserver</span>(<span class="params">address, username, password, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> BimServerClient(address);</span><br><span class="line">    client.init(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      client.login(username, password, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 根据项目名称获取该项目的模型场景</span></span><br><span class="line">        client.call(<span class="string">"ServiceInterface"</span>, <span class="string">"getAllProjects"</span>, &#123;</span><br><span class="line">          onlyTopLevel: <span class="literal">true</span>,</span><br><span class="line">          onlyActive: <span class="literal">true</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">projects</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> totalFound = <span class="number">0</span>;</span><br><span class="line">          projects.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">project</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (project.name === projectName) &#123;</span><br><span class="line">              token = client.token;</span><br><span class="line">              poid = project.oid;</span><br><span class="line">              lastRevisionId = project.lastRevisionId;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    loadFromBimserver(address, account, password);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="模型加载及展示"><a href="#模型加载及展示" class="headerlink" title="模型加载及展示"></a>模型加载及展示</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载模型并展示</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"bimsurfer/src/BimSurfer"</span>,</span><br><span class="line">    <span class="string">"bimsurfer/src/BimServerModelLoader"</span>,</span><br><span class="line">    <span class="string">"bimsurfer/src/StaticTreeRenderer"</span>,</span><br><span class="line">    <span class="string">"bimsurfer/src/MetaDataRenderer"</span>,</span><br><span class="line">    <span class="string">"bimsurfer/lib/domReady!"</span>],</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">BimSurfer, BimServerModelLoader, StaticTreeRenderer, MetaDataRenderer</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">processBimSurferModel</span>(<span class="params">bimSurferModel</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      bimSurferModel.getTree().then(<span class="function"><span class="keyword">function</span> (<span class="params">tree</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> domtree = <span class="keyword">new</span> StaticTreeRenderer(&#123;</span><br><span class="line">          domNode: <span class="string">'treeContainer'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        domtree.addModel(&#123;<span class="attr">name</span>: <span class="string">""</span>, <span class="attr">id</span>: lastRevisionId, <span class="attr">tree</span>: tree&#125;);</span><br><span class="line">        domtree.build();</span><br><span class="line">        metadata = <span class="keyword">new</span> MetaDataRenderer(&#123;</span><br><span class="line">          domNode: <span class="string">'dataContainer'</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        metadata.addModel(&#123;<span class="attr">name</span>: <span class="string">""</span>, <span class="attr">id</span>: lastRevisionId, <span class="attr">model</span>: bimSurferModel&#125;);</span><br><span class="line"></span><br><span class="line">        bimSurfer.on(<span class="string">"selection-changed"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">selected</span>) </span>&#123;</span><br><span class="line">          domtree.setSelected(selected, domtree.SELECT_EXCLUSIVE);</span><br><span class="line">          metadata.setSelected(selected);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        domtree.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">oid, selected</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (selected.length) &#123;</span><br><span class="line">            bimSurfer.viewFit(&#123;</span><br><span class="line">              ids: selected,</span><br><span class="line">              animate: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          bimSurfer.setSelection(&#123;</span><br><span class="line">            ids: selected,</span><br><span class="line">            clear: <span class="literal">true</span>,</span><br><span class="line">            selected: <span class="literal">true</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bimSurfer = <span class="keyword">new</span> BimSurfer(&#123;</span><br><span class="line">      domNode: <span class="string">"viewerContainer"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">window</span>.bimSurfer = bimSurfer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bimServerClient = <span class="keyword">new</span> BimServerClient(address, <span class="literal">null</span>);</span><br><span class="line">    bimServerClient.init(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      bimServerClient.setToken(token, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> modelLoader = <span class="keyword">new</span> BimServerModelLoader(bimServerClient, bimSurfer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> models = &#123;&#125;; <span class="comment">// roid -&gt; Model</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> nrProjects;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadModels</span>(<span class="params">models, totalBounds</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> center = [</span><br><span class="line">            (totalBounds.min[<span class="number">0</span>] + totalBounds.max[<span class="number">0</span>]) / <span class="number">2</span>,</span><br><span class="line">            (totalBounds.min[<span class="number">1</span>] + totalBounds.max[<span class="number">1</span>]) / <span class="number">2</span>,</span><br><span class="line">            (totalBounds.min[<span class="number">2</span>] + totalBounds.max[<span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line">          ];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> globalTransformationMatrix = [</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">            -center[<span class="number">0</span>], -center[<span class="number">1</span>], -center[<span class="number">2</span>], <span class="number">1</span></span><br><span class="line">          ];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> roid <span class="keyword">in</span> models) &#123;</span><br><span class="line">            <span class="keyword">var</span> model = models[roid];</span><br><span class="line">            modelLoader.setGlobalTransformationMatrix(globalTransformationMatrix);</span><br><span class="line">            modelLoader.loadFullModel(model).then(<span class="function"><span class="keyword">function</span> (<span class="params">bimSurferModel</span>) </span>&#123;</span><br><span class="line">              processBimSurferModel(bimSurferModel);</span><br><span class="line">              <span class="comment">//填充下拉框</span></span><br><span class="line">              getModelOidAndName(bimSurferModel);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getModelOidAndName</span>(<span class="params">thisModel</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> modelObj = thisModel.apiModel.objects;</span><br><span class="line">          <span class="built_in">Object</span>.keys(modelObj).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modelObj[key].object.hasChildren === <span class="literal">undefined</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> option = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span><br><span class="line">              $(option).val(key);</span><br><span class="line">              <span class="keyword">if</span> (modelObj[key].object.Name === <span class="literal">undefined</span> || modelObj[key].object.Name === <span class="string">""</span>) &#123;</span><br><span class="line">                $(option).text(key);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(option).text(modelObj[key].object.Name);</span><br><span class="line">              &#125;</span><br><span class="line">              $(<span class="string">'#select'</span>).append(option);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bimServerClient.call(<span class="string">"ServiceInterface"</span>, <span class="string">"getAllRelatedProjects"</span>, &#123;<span class="attr">poid</span>: poid&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">projects</span>) </span>&#123;</span><br><span class="line">          nrProjects = projects.length;</span><br><span class="line">          <span class="keyword">var</span> totalBounds = &#123;</span><br><span class="line">            min: [<span class="built_in">Number</span>.MAX_VALUE, <span class="built_in">Number</span>.MAX_VALUE, <span class="built_in">Number</span>.MAX_VALUE],</span><br><span class="line">            max: [-<span class="built_in">Number</span>.MAX_VALUE, -<span class="built_in">Number</span>.MAX_VALUE, -<span class="built_in">Number</span>.MAX_VALUE]</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">          projects.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">project</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (project.lastRevisionId !== <span class="number">-1</span>) &#123;</span><br><span class="line">              <span class="comment">//lastRevisionId</span></span><br><span class="line">              bimServerClient.getModel(project.oid, project.lastRevisionId, project.schema, <span class="literal">false</span>, <span class="function"><span class="keyword">function</span> (<span class="params">model</span>) </span>&#123;</span><br><span class="line">                models[project.lastRevisionId] = model;</span><br><span class="line"></span><br><span class="line">                bimServerClient.call(<span class="string">"ServiceInterface"</span>, <span class="string">"getModelMinBounds"</span>, &#123;<span class="attr">roid</span>: project.lastRevisionId&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">minBounds</span>) </span>&#123;</span><br><span class="line">                  bimServerClient.call(<span class="string">"ServiceInterface"</span>, <span class="string">"getModelMaxBounds"</span>, &#123;<span class="attr">roid</span>: project.lastRevisionId&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">maxBounds</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (minBounds.x &lt; totalBounds.min[<span class="number">0</span>]) &#123;</span><br><span class="line">                      totalBounds.min[<span class="number">0</span>] = minBounds.x;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (minBounds.y &lt; totalBounds.min[<span class="number">1</span>]) &#123;</span><br><span class="line">                      totalBounds.min[<span class="number">1</span>] = minBounds.y;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (minBounds.z &lt; totalBounds.min[<span class="number">2</span>]) &#123;</span><br><span class="line">                      totalBounds.min[<span class="number">2</span>] = minBounds.z;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (maxBounds.x &gt; totalBounds.max[<span class="number">0</span>]) &#123;</span><br><span class="line">                      totalBounds.max[<span class="number">0</span>] = maxBounds.x;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (maxBounds.y &gt; totalBounds.max[<span class="number">1</span>]) &#123;</span><br><span class="line">                      totalBounds.max[<span class="number">1</span>] = maxBounds.y;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (maxBounds.z &gt; totalBounds.max[<span class="number">2</span>]) &#123;</span><br><span class="line">                      totalBounds.max[<span class="number">2</span>] = maxBounds.z;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nrProjects--;</span><br><span class="line">                    <span class="keyword">if</span> (nrProjects === <span class="number">0</span>) &#123;</span><br><span class="line">                      loadModels(models, totalBounds);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              nrProjects--;</span><br><span class="line">              <span class="keyword">if</span> (nrProjects === <span class="number">0</span>) &#123;</span><br><span class="line">                loadModels(models, totalBounds);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p>在index.html中右击，选择 <code>Run &#39;index.html&#39;</code>或者Ctrl + Shift + F10启动页面，效果如图：</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-hellobim-01.png" alt=""></p>
<p>点击任意部件，部件高亮并且可以查看部件的信息。</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-hellobim-02.png" alt=""></p>
<p><em>界面丑，待优化，至少模型加载并展示了嘛</em></p>
<p><em>能力有限，如有错误或疑问请在评论区指出，谢谢。</em></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIM </tag>
            
            <tag> BIMserver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BIMserver入门笔记 - 01环境搭建、数据导入及预览]]></title>
      <url>/posts/3869274485/</url>
      <content type="html"><![CDATA[<p><strong>轻松搭建BIMserver开发环境：</strong><br>BIMserver在国内开发资料太少，关于环境搭建的有一些，我也是参照着这些教程一步步的搭建，该笔记把遇到的一些坑给记录下来，方便以后参考。</p>
<a id="more"></a>
<ol>
<li><p>BIMserver入门笔记 - 01环境搭建、数据导入及预览</p>
</li>
<li><p><a href="../3230248873/">BIMserver入门笔记 - 02登录及模型展示</a></p>
</li>
</ol>
<p>现在的工作就是，什么热就干什么（什么… 小李你说啥，Tom热~~），这年头就这样，能把自己的产品给推出去，并且能加码推出去就是胜利。</p>
<p>BIM在行业里应用不多，大家都在积极的储备该技术，都指望着自己能厚积薄发。</p>
<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>这里给出官方开源<a href="https://github.com/opensourceBIM/BIMserver" target="_blank" rel="noopener">地址</a>，下载相应版本的发布版本（这里以<a href="https://github.com/opensourceBIM/BIMserver/releases/tag/parent-1.5.88" target="_blank" rel="noopener">v1.5.88</a>为例，下载资料已经整理好了，点击<a href="https://github.com/ibrucekong/bimserver-env" target="_blank" rel="noopener">下载</a>）。</p>
<p><em>由于BIMserver的开发环境搭建时对版本的兼容性要求比较高，小版本不一样都会出错</em></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li><p>选择一个文件夹命名<code>BIMserver</code>，且整个文件夹的路径中没有空格和中文；</p>
</li>
<li><p>将<code>bimserver-env</code>文件夹下的文件都拷贝进来</p>
</li>
<li><p>双击<code>bimserverjar-1.5.88.jar</code>，<code>Address</code>内容改为<code>你的IP</code>，然后点击<code>Start</code></p>
</li>
<li><p>等服务启动成功后，点击<code>Launch Webbrowser</code>，打开平台自带的运维界面</p>
<p>这是一个主要的配置过程，过程就用图片来说明了，如下：</p>
<p>a. 找一个没有中文、没有空格的路径，存放jar文件</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-01.png" alt=""> </p>
<p>b. 全程使用IP作为服务发布的地址，先获取IP再说</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-02.png" alt=""> </p>
<p>c. 双击启动jar，将Address中的localhost改为刚才获取的IP，点击右下角的start按钮</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-03.png" alt=""> </p>
<p>d. 当看到信息窗口中打印 Server started successfully即可，并点击 Launch Webbrowser</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-04.png" alt=""> </p>
<p>e. 打开BIMserver的运维安装界面，填写服务名称、服务描述，其他默认即可，点击Next</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-05.png" alt=""> </p>
<p>f. 设置管理员账号、密码，进入下一步</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-06.png" alt=""> </p>
<p>g. 设置email服务，忽略，点击Next</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-07.png" alt=""> </p>
<p>h. 勾选掉所有的插件的勾，点击upload JAR files of plugins，进行离线安装插件</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-08.png" alt=""> </p>
<p>i. 由于每次只能打开一个插件，所以需要耐心的将每一个插件选择好（不要有遗漏哦）</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-09.png" alt=""> </p>
<p>j. 这是插件列表，最好数一下</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-10.png" alt=""> </p>
<p>k. 默认，下一步</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-11.png" alt=""> </p>
<p>l. 点击 Setup，开始安装</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-12.png" alt=""> </p>
<p>m. 安装过程中，打印了一行红色的字体，忽略，不用管，会继续安装</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-13.png" alt=""> </p>
<p>n. 直至出现以下内容，表示安装成功，点击箭头指向的链接</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-14.png" alt=""> </p>
<p>o. 刷新后，出现这些内容，主要使用的是bimviews，点击打开</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-15.png" alt=""> </p>
<p>p. 需要身份验证，填写安装时填写的账号、密码</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-16.png" alt=""> </p>
<p>q. 登录成功后，界面中是工程列表，但是没有工程</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-17.png" alt=""> </p>
<p>r. 找到如图的新建项目的按钮</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-18.png" alt=""> </p>
<p>s. 输入项目名称、项目描述，其他默认，点击Add</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-19.png" alt=""> </p>
<p>t. 项目创建成功，点击箭头所指的按钮</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-20.png" alt=""> </p>
<p>u. 选择 Checkin… 进行模型的导入</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-21.png" alt=""> </p>
<p>v. 导入模型有两种方式，一种是本地文件，一种是URL，这里以本地文件为例进行演示</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-22.png" alt=""> </p>
<p>w. 选择需要导入的模型文件</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-23.png" alt=""> </p>
<p>x. 选择好后，文件类型和注释都有默认值，直接点击Checkin new revision</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-24.png" alt=""> </p>
<p>y. 这个导入速度和使用的电脑性能有关</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-25.png" alt=""> </p>
<p>z. 导入成功后，点击3D这个按钮</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-26.png" alt=""> </p>
<p>aa. 在左侧布局中，有可以展开的树结构，和有控制显隐的眼睛</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-27.png" alt=""> </p>
<p>ab. 模型展示效果，左键拖拽旋转，中键拖拽平移</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-28.png" alt=""> </p>
<p>ac. 通过隐藏外面的部件，可以看到内部的细节</p>
<p><img src="https://brucekong-com.gitee.io/images/bimserver-29.png" alt=""> </p>
</li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>BIMserver的文件夹 [不要有中文，不要有空格]*3 （假设说了三次）</li>
<li>服务地址最好填写为IP（管他呢，写localhost也行，但是总感觉后面会需要改为IP或域名）</li>
<li>记住账号，密码</li>
<li>安装插件式需要科学上网的（就因为这个，博主专门为搭建准备了完备的安装包和离线文件）</li>
</ol>
<p><em>能力有限，如有错误或疑问请在评论区指出，谢谢。</em></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BIM </tag>
            
            <tag> BIMserver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端地图应用中几种监听事件]]></title>
      <url>/posts/1380263657/</url>
      <content type="html"><![CDATA[<p><strong>轻松绑定解除事件监听：</strong><br>在前端使用JavaScript给一个元素绑定、解除监听事件最为常用的是addEventListener，解除也很容易。在前端地图开发中，也会遇到很多事件绑定、解除的问题，下面我们就来讨论一下在这些环境下的事件监听是怎么实现的。</p>
<a id="more"></a>
<p>从事GIS方向，和地图打交道比较多，对于各种地图的监听事件的使用比较多，对于常用的事件监听方法梳理了以下内容，作为笔记保存。</p>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><blockquote>
<p> JavaScript使我们有能力创建动态页面，网页中的每一个元素都可以产生某些触发JavaScript函数的事件。我们可以认为事件是可以被JavaScript侦测到的一种行为。</p>
</blockquote>
<h3 id="地图开发中的事件监听"><a href="#地图开发中的事件监听" class="headerlink" title="地图开发中的事件监听"></a>地图开发中的事件监听</h3><ul>
<li>百度</li>
<li>高德</li>
<li>谷歌</li>
<li>ArcGIS</li>
</ul>
<h3 id="事件监听的使用"><a href="#事件监听的使用" class="headerlink" title="事件监听的使用"></a>事件监听的使用</h3><h4 id="原生事件监听"><a href="#原生事件监听" class="headerlink" title="原生事件监听"></a>原生事件监听</h4><p>在Web项目中要对dom元素绑定监听事件，有onclick，原生方法一般使用attachEvent和addEventListener。其中attachEvent使用与IE早期版本，比如IE6、7、8，而addEventListener适用于IE9、10、11，还有FireFox、Chrome、Safari和Opera等现代浏览器。</p>
<ol>
<li><p>直接添加</p>
<p>a. html方式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最简单的是在dom上添加 onclick 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"clickMe"</span> <span class="attr">onclick</span>=<span class="string">"check(this)"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>b. javascript方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给元素添加 onclick 事件 ： onclick还可以是 ondblclick、ondrag等</span></span><br><span class="line">element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>attachEvent</p>
<p>在早期IE中，使用attachEvent作为添加监听的一种方式，对一个元素绑定监听可以按照以下方式进行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"onclick"、"onmouseover"、"onkeyup"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.attachEvent(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* element 需要移除事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"onclick"、"onmouseover"、"onkeyup"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.attachEvent(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>addEventListener</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"keyup"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.addEventListener(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* element 需要移除事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"keyup"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.removeEventListener(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>小结</li>
</ol>
<p>从以上两个方法我们可以看出其中存在着一些差别：</p>
<ol>
<li>兼容性方面，attachEvent仅支持早期的IE版本，而addEventListener支持的较为广泛；</li>
<li>attachEvent在事件类型上，比addEventListener多一个字符”on”，需要额外注意；</li>
<li>两者绑定监听都需要实名函数，匿名函数的绑定关系是无法移除的。</li>
</ol>
<h4 id="百度事件监听"><a href="#百度事件监听" class="headerlink" title="百度事件监听"></a>百度事件监听</h4><p>在百度地图中对dom元素的监听，官方给出的是addEventListener和removeEventListener，使用方法和原生的addEventListener类似，但是地图API事件监听是独立的，与原生的dom事件不同，而且还增加很多自定义的事件类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"dragstart"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.addEventListener(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* element 需要移除事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"dragstart"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.removeEventListener(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果要能解绑事件，绑定监听时就需要使用实名函数，匿名函数是无法解绑的。</p>
<h4 id="高德事件监听"><a href="#高德事件监听" class="headerlink" title="高德事件监听"></a>高德事件监听</h4><p>高德在事件监听上提供了众多的方法，使用最多的就是on/off组合，另外还有addDomListener、addListener、addListenerOnce、removeListener和trigger，此次主要介绍一下最为常用的使用方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"dragstart"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.on(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* element 需要移除事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"dragstart"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">element.off(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的，在 绑定和解绑时都应该使用实名函数，除非之后不需要解绑。</p>
<h4 id="谷歌事件监听"><a href="#谷歌事件监听" class="headerlink" title="谷歌事件监听"></a>谷歌事件监听</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouseover"、"dragstart"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> evt = google.maps.event.addListener(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* element 需要移除事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* evt 绑定监听时的句柄</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">google.maps.event.removeListener(evt)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到谷歌这里，绑定监听就不如百度和高德那样，而是通过绑定监听返回的句柄进行解绑操作。这样的话，在绑定监听时的回调函数就可以是匿名函数，也可以是实名函数了。所以说上帝为你关闭的一扇大门，肯定会给你打开一扇窗户，不会让你为难的。</p>
<h4 id="ArcGIS中的事件监听"><a href="#ArcGIS中的事件监听" class="headerlink" title="ArcGIS中的事件监听"></a>ArcGIS中的事件监听</h4><p>ArcGIS的事件监听有两种方式，一种是很早之前的版本connect style，一种是on style。其中connect是通过dojo进行实现，不过现在更加推荐on来实现。</p>
<ol>
<li>connect style</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"onClick"、"onMouseOver"等</span></span><br><span class="line"><span class="comment">* callback 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> evt = dojo.connect(element, event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* evt 绑定监听时的句柄</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">dojo.disconnect(evt)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>on style</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 绑定监听</span></span><br><span class="line"><span class="comment">* element 需要添加事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* event 事件类型（事件名称），是字符类型，比如包含"click"、"mouse-over"等</span></span><br><span class="line"><span class="comment">* function 触发监听的回调函数</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> evt = element.on(event, callback)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 移除监听</span></span><br><span class="line"><span class="comment">* element 需要移除事件监听的元素或dom</span></span><br><span class="line"><span class="comment">* evt 绑定监听时的句柄</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">evt.remove()；</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* callback 是回调函数名，可以自定义</span></span><br><span class="line"><span class="comment">* e 是回调参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中connect style和on style对于event格式不一样，除了方法名不一样外，在调用方面也存在一定的不同，需要额外注意，不要混淆。</p>
<h3 id="事件监听总结"><a href="#事件监听总结" class="headerlink" title="事件监听总结"></a>事件监听总结</h3><p>从上到下看过来，就会发现事件监听也是大同小异，调用方式、事件名称都是次要，关键是考虑好事件绑定后要不要解除，一般来讲都需要绑定实名函数（也有例外，比如谷歌和ArcGIS），方便解除监听事件。</p>
<p>从事开发行业，特别是GIS行业，几乎在所有的项目中都会使用事件监听（主要指地图事件监听），所以希望小伙伴都能扎实的掌握好该技能。</p>
<p><em>能力有限，如有错误或疑问请在评论区指出，谢谢。</em></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件监听 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IE和Chrome带有多个参数的互相跳转]]></title>
      <url>/posts/1077207737/</url>
      <content type="html"><![CDATA[<p><strong>IE &amp; Chrome的互相跳转：</strong><br>简单需求，简单实现。从IE跳转到Chrome，介绍使用<code>ActiveXObject</code>进行操作跳转，并实现多个参数的传递；从Chrome跳转到IE，介绍使用修改注册表的形式进行操作。</p>
<a id="more"></a>
<h3 id="IE-to-Chrome"><a href="#IE-to-Chrome" class="headerlink" title="IE to Chrome"></a>IE to Chrome</h3><p>在IE中打开Chrome方法简单且粗暴，<code>talk is cheap, show me the code</code>。</p>
<h4 id="单参or无参"><a href="#单参or无参" class="headerlink" title="单参or无参"></a>单参or无参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var objShell &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;);</span><br><span class="line">&#x2F;&#x2F; 无参</span><br><span class="line">objShell.Run(&quot;cmd.exe &#x2F;c start chrome www.baidu.com&quot;,0,true);</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/ie-to-chrome-no-param.png" alt="无参"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var objShell &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;);</span><br><span class="line">&#x2F;&#x2F; 单参</span><br><span class="line">objShell.Run(&quot;cmd.exe &#x2F;c start chrome www.baidu.com?id&#x3D;1&quot;,0,true);</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/ie-to-chrome-one-param.png" alt="单参"></p>
<p>上述情况都没问题，一切都很顺利，下面来看看多参的情况。</p>
<h4 id="多参传递"><a href="#多参传递" class="headerlink" title="多参传递"></a>多参传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 如果要传 id&#x3D;1, name&#x3D;bruce 两个参数</span><br><span class="line">var objShell &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;);</span><br><span class="line">objShell.Run(&quot;cmd.exe &#x2F;c start chrome www.baidu.com?id&#x3D;1&amp;name&#x3D;bruce&quot;,0,true);</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/ie-to-chrome-one-param.png" alt="多参"></p>
<p>什么鬼，我明明传了两个参数啊，怎么只显示了一个，只显示了第一个。What the hell is going on?</p>
<p>原来在cmd的世界里，它有自己的一套转义语法，可参考<a href="https://www.cnblogs.com/newsea/p/3866413.html" target="_blank" rel="noopener">链接</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var objShell &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;);</span><br><span class="line">&#x2F;&#x2F; 经过修正，将&amp;符号进行转义，使用^&amp;代替&amp;</span><br><span class="line">objShell.Run(&quot;cmd.exe &#x2F;c start chrome www.baidu.com?id&#x3D;1^&amp;name&#x3D;bruce&quot;,0,true);</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/ie-to-chrome-more-param.png" alt="多参"></p>
<p>看完在IE中打开Chrome了，现在来瞅瞅在Chrome中打开IE的方法吧。</p>
<h3 id="Chrome-to-IE"><a href="#Chrome-to-IE" class="headerlink" title="Chrome to IE"></a>Chrome to IE</h3><p>在Chrome中打开IE，并传多参数，相比IE中打开Chrome要麻烦一些，大致分为以下几个方面。</p>
<h4 id="配置跳转环境"><a href="#配置跳转环境" class="headerlink" title="配置跳转环境"></a>配置跳转环境</h4><ol>
<li><p>regOpenIE.reg</p>
<p>1.1 在D盘下新建openIE文件夹，路径为<code>D:\openIE\</code></p>
<p>1.2 在openIE路径下新建<code>regOpenIE.reg</code>，并将如下内容复制进该文件：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\openIE]</span><br><span class="line">@&#x3D;&quot;URL:Alert Protocol&quot;</span><br><span class="line">&quot;URL Protocol&quot;&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\openIE\DefaultIcon]</span><br><span class="line">@&#x3D;&quot;iexplore.exe,1&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\openIE\shell]</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\openIE\shell\open]</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\openIE\shell\open\command]</span><br><span class="line">@&#x3D;&quot;cmd &#x2F;c set m&#x3D;%1 &amp; \&quot;D:\\alert\\openIE.bat\&quot; %%m%% &amp; exit&quot;</span><br></pre></td></tr></table></figure>
<p>其中文本中的最后一行<code>D:\\alert\\openIE.bat\</code>是当前文件的目录。</p>
<ol start="2">
<li>在openIE文件夹下新建<code>openIE.bat</code>，并将如下内容复制进该文件：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set m&#x3D;%m:openIE:&#x3D;%</span><br><span class="line">set m&#x3D;&quot;%m:separator&#x3D;&amp;%&quot;</span><br><span class="line">start &quot;&quot; &quot;C:\\Program Files\\internet explorer\\iexplore.exe&quot; %m%</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>其中文本中<code>start</code>一行中<code>C:\\Program Files\\internet explorer\\iexplore.exe</code>是你电脑中IE的路径，注意分隔符是双反斜杠。</p>
<h4 id="单参or无参-1"><a href="#单参or无参-1" class="headerlink" title="单参or无参"></a>单参or无参</h4><ol>
<li>在布局中加入以下内容。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;openIE:www.baidu.com&quot;&gt;Chrome to IE&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/chrome-to-ie-no-param.png" alt="无参"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;openIE:www.baidu.com?id&#x3D;1&quot;&gt;Chrome to IE&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/chrome-to-ie-one-param.png" alt="单参"></p>
<h4 id="多参传递-1"><a href="#多参传递-1" class="headerlink" title="多参传递"></a>多参传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 和测试IE跳转Chrome一样，传 id&#x3D;1, name&#x3D;bruce 两个参数，看下效果是不是能出来</span><br><span class="line">&lt;a href&#x3D;&quot;openIE:www.baidu.com?id&#x3D;1&amp;name&#x3D;bruce&quot;&gt;Chrome to IE&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/chrome-to-ie-one-param.png" alt="多参"></p>
<p>同样的思维，是不是<code>&amp;</code>又被转义或者影响到了呢，查阅资料，有<a href="https://blog.csdn.net/java_zys/article/details/51837899" target="_blank" rel="noopener">博主</a>给出了一个解决方案，使用无转义的字符去替代的方案(就是上面<code>openIE.bat</code>中第三行给出的内容)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;openIE:www.baidu.com?id&#x3D;1separatorname&#x3D;bruce&quot;&gt;Chrome to IE&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://brucekong-com.gitee.io/images/chrome-to-ie-more-param.png" alt="多参"></p>
<p>使用参数中的<code>separator</code>代替<code>&amp;</code>，完成解析。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>IE和Chrome的跳转可能还有其他方法，如果朋友找到更加简单的方法，请在下面回复告诉博主，感激不尽。</p>
<div style="text-align: center"><img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> IE </tag>
            
            <tag> 跳转 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欢迎Shizuku入住博客]]></title>
      <url>/posts/2119619363/</url>
      <content type="html"><![CDATA[<p><strong>生活不易，至少还有Shizuku：</strong><br>玩Hexo博客还在热恋期，干货没有，瞎鼓捣的导倒是不少。今天给大家带来的是我博客中唯一的女生——Shizuku。</p>
<a id="more"></a>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>首先欢迎Shizuku！</p>
<p>……没了？</p>
<h4 id="安装live2D"><a href="#安装live2D" class="headerlink" title="安装live2D"></a>安装live2D</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>
<p>可以说这个插件就是她妈，没有她妈就没她啊（举手，表示没骂人，真的）</p>
<h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: &#x2F;&#x2F; 这里是我的Shizuku的小窝</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 60</span><br><span class="line">    height: 120</span><br><span class="line">    hOffset: 65</span><br><span class="line">    vOffset: 0</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure>
<h4 id="迎接Shizuku"><a href="#迎接Shizuku" class="headerlink" title="迎接Shizuku"></a>迎接Shizuku</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install live2d-widget-model-shizuku --save</span><br></pre></td></tr></table></figure>
<p>并在<code>_config.yml</code>中的小窝旁边写下<code>Shizuku</code>的大名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">debug: false</span><br><span class="line">model:</span><br><span class="line">  use: live2d-widget-model-shizuku &#x2F;&#x2F; Shizuku的大名</span><br><span class="line">display:</span><br><span class="line">  position: left</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>大家根据自己的博客布局和喜好对Shizuku进行位置调整</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">display:</span><br><span class="line">  position: left</span><br><span class="line">  width: 60</span><br><span class="line">  height: 120</span><br><span class="line">  hOffset: 65</span><br><span class="line">  vOffset: 0</span><br></pre></td></tr></table></figure>
<p>不懂这些参数什么意思不重要，不要恐惧，先尝试改些参数，看<code>Shizuku</code>往哪边移动，然后再进行定向的调整。</p>
<h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>然后在浏览器中打开<code>http://localhost:4000</code>，在左下角就能看到可爱的<code>Shizuku</code>了。</p>
<p><img src="https://brucekong-com.gitee.io/images/shizuku.png" alt="Shizuku"></p>
<p>如果有想拥有自己Shizuku的小伙伴，希望大家通过我的笔记也能顺利迎来属于自己的Shizuku。</p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> live2D </tag>
            
            <tag> Shizuku </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Chrome中调试Ionic的Android应用]]></title>
      <url>/posts/289005530/</url>
      <content type="html"><![CDATA[<p><strong>Ionic的Android端调试：</strong><br>在以往Android原生开发时，App的调试用真机很是简单，即便是虚拟机调试，也是手到擒来；而如今，在混合应用横行的年代，动不动就是React-Native、Ionic、Vue、MUI等一系列的混合架构写出来的Android，还没对其调试过，公司采用Ionic研发并遇到一些坑，特将调试过程记录下来。</p>
<a id="more"></a>
<p>首先百度一番，度娘告知有以下两种方法进行调试：</p>
<ol>
<li><p>在项目根目录执行以下命令，调试信息将在console中打印出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ionic run android -l -c</span><br></pre></td></tr></table></figure>
</li>
<li><p>Chrome调试</p>
</li>
</ol>
<p>由于是从项目中拿到App对其调试，没有工程，所以第一种调试方法无法测试。</p>
<p>第二种方法是网上应用最多的，我们来看看需要哪些操作：</p>
<ol>
<li><p>首先真机或虚拟机连接电脑（手机开USB调试模式，并且允许电脑能访问手机），并且在命令行中确认</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br></pre></td></tr></table></figure>
<p>确保设备连接到电脑。</p>
</li>
<li><p>在Chrome中打开<code>chrome://inspect/#devices</code>，可以在Remote Target中看到已经连接的手机和手机中已经开启的应用线程。</p>
</li>
<li><p>找到需要调试的App，点击旁边的inspect（注意：电脑要能科学上网下载一些依赖，不然会显示404或一片空白，这些依赖会缓存下来，不清理缓存的话只需第一次运行时翻墙即可）</p>
</li>
<li><p>最重要的一点是，Ionic打的包一定是debug包，否则在Remote Target中是看不到该应用的，也就无法调试咯。</p>
</li>
</ol>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Ionic </tag>
            
            <tag> Chrome </tag>
            
            <tag> 调试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[入坑公路车]]></title>
      <url>/posts/1652333246/</url>
      <content type="html"><![CDATA[<p><strong>第一辆公路车：</strong><br>公路车第一次长草是在过了年的时候，以前也经常骑自行车，从小学三年级骑到大四毕业，车子就是很平常的平把山地车或者休闲车，对于小弯把公路车还真没接触过，这草说长就是疯长啊，果断收割。</p>
<a id="more"></a>
<p>草已经长了快半年了，在网上也刷了不少相关的帖子，一直没忍心入坑。顾虑有以下两点：</p>
<ol>
<li>买了主要通勤用，家里可以放心，停在公司真的是不放心；</li>
<li>平时练腿，健身健体，由于搬砖的工作性质，需要适当调节一下运动时间。</li>
</ol>
<p>就在昨天，小伙伴们已经购买了属于自己的拉轰电动，我也是差一点没忍住，当时三个人，但是电驴的配色只有两辆了，配色不够，我就“大方的”把机会让给他们俩了，更进一步的为我入坑公路车提供了绝佳的机会。</p>
<p>今天在另一个朋友的陪同下，来到“XX捷安特专卖店”。之前在网上也浏览过一些博客、帖子，针对捷安特的公路车也了解了一些，但是真到了专卖店里，和老板攀谈起来还是有些切啊。</p>
<p>由于预算（穷）的原因，心里只存放了SCR1、SCR2。首先，试骑了SCR2，此车入门偏下档次，就不再贴太多相关信息，骑了一圈就pass了；试骑SCR1，也是入门车，比SCR2贵1000钢镚，试骑比较了确实不一样，车架轻（前叉是碳纤维）而且稍有推背感（七哥说的，也确实是），最后选择了这款的原因有以下几点（又要吃土了）：</p>
<ol>
<li>车比较轻，前叉是碳纤维，有效降低车头重量，并且提高刚性和吸震性；</li>
<li>涂装也比较喜欢，SCR2是黑白，SCR1有亮绿和消光亮黑，选择了后者；</li>
<li>没有螳螂须，内走线，逼格再次提升；</li>
<li>车架由GIANT 自家的ALUXX SL铝材，有效降低了整车重量。</li>
</ol>
<p>由于对公路车还不够了解，有些优缺点还需要继续发掘。</p>
<p>配置详细信息如下：</p>
<table>
<thead>
<tr>
<th>描述</th>
<th>型号</th>
</tr>
</thead>
<tbody>
<tr>
<td>车架</td>
<td>GIANT ALUXX SL</td>
</tr>
<tr>
<td>前叉</td>
<td>碳纤维公路前叉</td>
</tr>
<tr>
<td>撤吧</td>
<td>铝合金管公路把</td>
</tr>
<tr>
<td>车首竖杆</td>
<td>铝合金竖杆</td>
</tr>
<tr>
<td>座垫</td>
<td>GIANT CONTACT 座垫</td>
</tr>
<tr>
<td>座垫杆</td>
<td>铝合金 D 型座垫杆</td>
</tr>
<tr>
<td>变速把手</td>
<td>SHIMANO ST-R3000</td>
</tr>
<tr>
<td>前变速器</td>
<td>SHIMANO FD-R3000</td>
</tr>
<tr>
<td>后变速器</td>
<td>SHIMANO RD-R3000</td>
</tr>
<tr>
<td>飞轮</td>
<td>SHIMANO CS-HG400-9</td>
</tr>
<tr>
<td>刹车</td>
<td>SHIMANO BR-R3000</td>
</tr>
<tr>
<td>大齿盘</td>
<td>铝合金中空一体齿盘</td>
</tr>
<tr>
<td>轮圈</td>
<td>铝合金高框圈</td>
</tr>
<tr>
<td>花鼓</td>
<td>铝合金培林花鼓</td>
</tr>
<tr>
<td>钢丝</td>
<td>HTSS 钢丝</td>
</tr>
<tr>
<td>轮胎</td>
<td>GIANT S-R4 700X25C轮胎</td>
</tr>
<tr>
<td>后避震器</td>
<td>无</td>
</tr>
<tr>
<td>SIZE</td>
<td>S码 700CX445</td>
</tr>
</tbody>
</table>
<p>入门级别的公路车，已经很满意了，毕竟花了那么多大洋，未来几个月要吃土了。</p>
<p>此处就不一一贴局部细节图了，只贴一些低像素的整车效果图：</p>
<p><img src="https://brucekong-com.gitee.io/images/bike.png" alt="Giant SCR1"></p>
<p><em>车子有了，还差很多装备，骑行服、锁踏、锁鞋、心率计、功率计等等，试问：我需要吗？</em></p>
<p>另外说下我的计划（这就是浪的理由？）：</p>
<ol>
<li>平时保证通勤；</li>
<li>要有骑行计划，练踏频，练力量，健身咯；</li>
<li>这就是个附带效果了，争取三个月能减些脂肪，体重降2.5Kg；</li>
<li>有可能的话，最好能跟队骑行。</li>
</ol>
<p>看似简单的想法，但需要十足长期的努力，坚持很重要，加油！</p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> bike </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自行车 </tag>
            
            <tag> 公路车 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ionic使用百度地图弹窗并响应点击事件]]></title>
      <url>/posts/2994729501/</url>
      <content type="html"><![CDATA[<p><strong>Ionic响应百度地图弹窗中的点击事件：</strong><br>Ionic使用的语法TypeScript，有一套自己的生命周期，和ES5之前的使用习惯不相同，变量作用域不尽相同。在Ionic中使用百度地图，也会踩一些坑，最近在业务中遇到了这样的需求，百度地图弹窗中动态写的HTML布局的响应事件无法拿到。</p>
<a id="more"></a>
<h3 id="在Ionic中使用百度地图"><a href="#在Ionic中使用百度地图" class="headerlink" title="在Ionic中使用百度地图"></a>在Ionic中使用百度地图</h3><h4 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.首先在index.html中引入百度地图的URL（其中要有申请的KEY）</span><br><span class="line">&#x2F;&#x2F; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;api.map.baidu.com&#x2F;api?v&#x3D;3.0&amp;ak&#x3D;您的密钥&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.新建map组件，在ts文件中输入以下内容</span><br><span class="line">ionViewWillEnter()&#123;</span><br><span class="line">    let map &#x3D; new BMap.Map(&quot;allmap&quot;);&#x2F;&#x2F; allmap是在html布局中定义的&lt;div id&#x3D;&quot;allmap&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    let point &#x3D; new BMap.Point(116.417, 39.921);&#x2F;&#x2F; 初始化地图</span><br><span class="line">    map.centerAndZoom(point, 15);&#x2F;&#x2F; 初始化地图视图</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加Marker"><a href="#添加Marker" class="headerlink" title="添加Marker"></a>添加Marker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.在 map.centerAndZoom(point, 15) 的下一行继续添加以下内容</span><br><span class="line">let marker &#x3D; new BMap.Marker(point);&#x2F;&#x2F; 初始化Marker对象</span><br><span class="line">map.addOverlay(marker);&#x2F;&#x2F; 将marker放置到地图上</span><br></pre></td></tr></table></figure>
<h4 id="为marker添加点击事件"><a href="#为marker添加点击事件" class="headerlink" title="为marker添加点击事件"></a>为marker添加点击事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.在 map.addOverlay(marker) 的下一行继续添加以下内容</span><br><span class="line">marker.addEventListener(&quot;click&quot;, function()&#123;</span><br><span class="line">    &#x2F;&#x2F; TODO 做其他事情</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="弹出信息窗"><a href="#弹出信息窗" class="headerlink" title="弹出信息窗"></a>弹出信息窗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.在 map.addOverlay(marker) 和 marker.addEventListener 之间插入以下内容</span><br><span class="line">let options &#x3D; &#123;</span><br><span class="line">    width: 200,</span><br><span class="line">    height: 100,</span><br><span class="line">    title: &quot;测试弹窗的标题&quot;</span><br><span class="line">&#125;; &#x2F;&#x2F; 定义弹出窗参数</span><br><span class="line">let htm &#x3D; &#39;&lt;div&gt;内容：这是内容主体&lt;&#x2F;div&gt;&lt;div&gt;&lt;button id&#x3D;&quot;confirm&quot; onclick&#x3D;&quot;test()&quot;&gt;确定&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">let infoWindow &#x3D; new BMap.InfoWindow(htm, options); &#x2F;&#x2F; 初始化弹出窗对象</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 6.在 TODO 下面继续添加以下内容</span><br><span class="line">map.openInfoWindow(infoWindow, point); &#x2F;&#x2F; 点击marker执行该行代码，弹出信息窗</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 7.在该ts文件中，添加test方法</span><br><span class="line">test()&#123;</span><br><span class="line">    console.log(&quot;如果我再控制台中打印出来，说明弹窗中的button响应了，反之。&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="控制台没打印"><a href="#控制台没打印" class="headerlink" title="控制台没打印"></a>控制台没打印</h4><p>打印失败了！！！</p>
<p>有人分析说，<code>test</code>需要用<code>this</code>来调用，写成这个样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let infoWindow &#x3D; new BMap.InfoWindow(&#39;&lt;div&gt;内容：这是内容主体，啦啦啦&lt;&#x2F;div&gt;&lt;div&gt;&lt;button id&#x3D;&quot;confirm&quot; onclick&#x3D;&quot;this.test()&quot;&gt;确定&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&#39;, options); &#x2F;&#x2F; 初始化弹出窗对象</span><br></pre></td></tr></table></figure>
<p>同样的，还是失败了。</p>
<p>分析原因，是Ionic在初始化页面时，弹窗的布局信息并没有跟着初始化，而绑定的<code>test()</code>方法也没有初始化，所以绑定的方法无效。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>那怎么样才能保证能将<code>test()</code>方法绑定到<code>button</code>上的呢？</p>
<p>其实，我们可以曲线救国，让绑定事件在初始化弹窗之后，弹窗之前绑定，这样既可以有效的防止页面初始化带来的影响，又可以顺利绑定事件，下面是我的做法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以上完整代码</span><br><span class="line">&#x2F;&#x2F; 1.首先在index.html中引入百度地图的URL（其中要有申请的KEY）</span><br><span class="line">&#x2F;&#x2F; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;api.map.baidu.com&#x2F;api?v&#x3D;3.0&amp;ak&#x3D;您的密钥&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.新建map组件，在ts文件中输入以下内容</span><br><span class="line">ionViewWillEnter()&#123;</span><br><span class="line">    let map &#x3D; new BMap.Map(&quot;allmap&quot;);&#x2F;&#x2F; allmap是在html布局中定义的&lt;div id&#x3D;&quot;allmap&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    let point &#x3D; new BMap.Point(116.417, 39.921);&#x2F;&#x2F; 初始化地图</span><br><span class="line">    map.centerAndZoom(point, 15);&#x2F;&#x2F; 初始化地图视图</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 3.在 map.centerAndZoom(point, 15) 的下一行继续添加以下内容</span><br><span class="line">    let marker &#x3D; new BMap.Marker(point);&#x2F;&#x2F; 初始化Marker对象</span><br><span class="line">    map.addOverlay(marker);&#x2F;&#x2F; 将marker放置到地图上</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 5.在 map.addOverlay(marker) 和 marker.addEventListener 之间插入以下内容</span><br><span class="line">    let options &#x3D; &#123;</span><br><span class="line">        width: 200,</span><br><span class="line">        height: 100,</span><br><span class="line">        title: &quot;测试弹窗的标题&quot;</span><br><span class="line">    &#125;; &#x2F;&#x2F; 定义弹出窗参数</span><br><span class="line">    let htm &#x3D; &#39;&lt;div&gt;内容：这是内容主体&lt;&#x2F;div&gt;&lt;div&gt;&lt;button id&#x3D;&quot;confirm&quot;&gt;确定&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">    let infoWindow &#x3D; new BMap.InfoWindow(htm, options); &#x2F;&#x2F; 初始化弹出窗对象</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 4.在 map.addOverlay(marker) 的下一行继续添加以下内容</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    marker.addEventListener(&quot;click&quot;, function()&#123;</span><br><span class="line">        &#x2F;&#x2F; TODO 做其他事情</span><br><span class="line">        &#x2F;&#x2F; 绑定监听事件</span><br><span class="line">        document.getElementById(&quot;confirm&quot;).onclick &#x3D; that.test;</span><br><span class="line">        map.openInfoWindow(infoWindow, point); &#x2F;&#x2F; 点击marker执行该行代码，弹出信息窗</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 7.在该ts文件中，添加test方法</span><br><span class="line">test()&#123;</span><br><span class="line">    console.log(&quot;如果我再控制台中打印出来，说明弹窗中的button响应了，反之。&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样子再测试的话，控制台中就可以打印<code>如果我再控制台中打印出来，说明弹窗中的button响应了，反之。</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上问题在常规的B/S项目中不会发生，这是因为在Ionic项目中，使用的是Angular语法，即TypeScript（JavaScript的超集），该语法自己定义了一些新特性，使得开发效率更高，语法更简洁，再加上ES6（或更高）新特性，使得在动态生成的页面上绑定监听事件失效，所以可以通过延迟绑定或者适当时机绑定来解决。</p>
<p>Ionic做项目和以往的ES5或原生项目相比，效率更高、兼容多平台、开源组件更多、也更加美观，是一个比较好的路子。</p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ionic </tag>
            
            <tag> 百度地图 </tag>
            
            <tag> 点击事件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[吾爱破解论坛2018年7月21日暑假开放注册通知]]></title>
      <url>/posts/2639421812/</url>
      <content type="html"><![CDATA[<p><strong>吾爱破解论坛注册喜讯：</strong><br>吾爱开放注册又来了，此次是2018年第二次开放注册，3月13日没能上车的小伙伴，这次正值周六，天时地利人和，要整理好自己的注册资料，期待21日的到来吧。</p>
<a id="more"></a>
<div style="text-align: center;font-weight: bold;font-size: 2rem; color: red"><br>    喜讯、喜讯、喜讯<br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    <span>吾爱破解论坛开通开放注册</span><br>    <span>2018年7月21日12:00-14:00和20:00-22:00</span><br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px"><a href="https://www.52pojie.cn/?fromuid=575811" target="_blank" rel="noopener" style="text-align: center;">我要吾爱</a></div><br><div></div><br><strong><em>注册注意事项：</em></strong><br><br>1. 吸取上次上车失败的教训！！！<br>2. 注意不要错过注册时间<br>3. 认真读注册须知（需要等10分钟）<br>4. 事先把注册信息写在本子或word里（独一无二的邮箱和用户名） <a href="https://www.52pojie.cn/misc.php?mod=faq&amp;action=faq&amp;id=15&amp;messageid=16" target="_blank" rel="noopener">需要准备什么</a><br>5. 耐心检查填写内容（看是否都符合要求）<br>6. 邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 <a href="https://www.52pojie.cn/thread-98585-1-1.html" target="_blank" rel="noopener">帮助</a><br><br><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    祝愿小伙伴们都能获得自己的吾爱账号！<br></div><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 活动 </tag>
            
            <tag> 吾爱破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Linux中解决跨网段访问服务]]></title>
      <url>/posts/3249349784/</url>
      <content type="html"><![CDATA[<p><strong>在Linux中解决跨网段访问服务：</strong><br>有这样一个场景：在局域网中，两台电脑，A电脑使用交换机（192.168.72.33），B电脑使用WiFi（192.168.1.21），两者的网段不同，导致电脑A无法ping通电脑B。今天就来讲讲怎么在Linux中解决这个问题。</p>
<a id="more"></a>
<p>这是我在生产环境中遇到的一个问题，刚开始接触，踩了不小的坑，耽误了很长时间，以此来记录一下。</p>
<p>针对以上问题的解决办法就是：添加一个路由！</p>
<p>在A电脑中打开终端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ route add default gw 192.168.72.1</span><br></pre></td></tr></table></figure><br>加上后，发现可以ping通了，但是重启机器后，又无法ping通了。原因是上面加的路由是临时的，并未在系统中永久保存，如果需要添加永久路由，按照以下方法：</p>
<ul>
<li>打开终端，执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi &#x2F;etc&#x2F;rc.local</span><br></pre></td></tr></table></figure></li>
<li>在文档后插入一行，输入<em>route add default gw 192.168.72.1</em></li>
<li>按ESC键退出编辑状态，输入<code>:wq</code>，回车保存即可。</li>
</ul>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Route </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Linux中如何使用SCP快速拷贝数据]]></title>
      <url>/posts/1224017506/</url>
      <content type="html"><![CDATA[<p><strong>在Linux中快速拷贝数据的工具：</strong></p>
<p>根据工作上的需求：一个场景，两台电脑，万千碎片数据，该怎么从A电脑拷贝这些数据到B电脑？直接复制、粘贴？先打包、再复制粘贴？方法有很多，但是很少人去分析拷贝数据的快慢。</p>
<a id="more"></a>
<p>上面说的问题，在Linux、Windows、Mac环境下都存在，这里只从Linux的角度来实现下。为什么呢？不知大家注意上面“万千碎片数据”字眼了吗，一般这样的字眼基本上会出现在服务器的存储中，而当今服务器使用最多的操作系统就是Linux，所以本文只针对Linux之间互传为例进行说明。</p>
<h2 id="SCP是什么"><a href="#SCP是什么" class="headerlink" title="SCP是什么"></a>SCP是什么</h2><p>scp是secure copy的简写，用于Linux下进行远程拷贝的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的（稍微会影响一点速度）。</p>
<h2 id="为什么要用SCP"><a href="#为什么要用SCP" class="headerlink" title="为什么要用SCP"></a>为什么要用SCP</h2><ol>
<li>如果服务器上没有配置FTP服务器，没有开启web服务器，也没有做共享，无法通过常规的途径获取文件时，可以考虑使用scp。</li>
<li>需要将本机文件上传至远程服务器上，远程服务器没有开启FTP服务器或共享，无法通过常规方法上传时，可以考虑scp。</li>
</ol>
<h2 id="场景简介"><a href="#场景简介" class="headerlink" title="场景简介"></a>场景简介</h2><p>假设以下两台电脑是通过公网连接的，只需要把局域网的IP换成公网的IP即可。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>A电脑</th>
<th>B电脑</th>
</tr>
</thead>
<tbody>
<tr>
<td>场景</td>
<td>CentOS6.5</td>
<td>Ubuntu16.04</td>
</tr>
<tr>
<td>用户名</td>
<td>root</td>
<td>bruce</td>
</tr>
<tr>
<td>IP</td>
<td>192.168.1.20</td>
<td>192.168.1.21</td>
</tr>
<tr>
<td>数据目录</td>
<td>/home/backups/</td>
<td>/media/bruce/backups/</td>
</tr>
<tr>
<td>文件</td>
<td>某些png图片</td>
<td>某些png图片</td>
</tr>
</tbody>
</table>
<h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><table>
<thead>
<tr>
<th>命令参数</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>-1</td>
<td>强制scp命令使用协议ssh1</td>
</tr>
<tr>
<td>-2</td>
<td>强制scp命令使用协议ssh2</td>
</tr>
<tr>
<td>-4</td>
<td>强制scp命令只使用IPv4寻址</td>
</tr>
<tr>
<td>-6</td>
<td>强制scp命令只使用IPv6寻址</td>
</tr>
<tr>
<td>-B</td>
<td>使用批处理模式（传输过程中不询问传输口令或短语）</td>
</tr>
<tr>
<td>-C</td>
<td>允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</td>
</tr>
<tr>
<td>-p</td>
<td>保留原文件的修改时间，访问时间和访问权限。</td>
</tr>
<tr>
<td>-q</td>
<td>不显示传输进度条。</td>
</tr>
<tr>
<td>-r</td>
<td>递归复制整个目录。</td>
</tr>
<tr>
<td>-v</td>
<td>详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</td>
</tr>
<tr>
<td>-c cipher</td>
<td>以cipher将数据传输进行加密，这个选项将直接传递给ssh。</td>
</tr>
<tr>
<td>-F config</td>
<td>指定一个替代的ssh_config配置文件，此参数直接传递给ssh。</td>
</tr>
<tr>
<td>-i file</td>
<td>从identity_file指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</td>
</tr>
<tr>
<td>-l limit</td>
<td>限定用户所能使用的带宽，以Kbit/s为单位。</td>
</tr>
<tr>
<td>-o option</td>
<td>如果习惯于使用ssh_config(5)中的参数传递方式。</td>
</tr>
<tr>
<td>-P port</td>
<td>注意是大写的P, port是指定数据传输用到的端口号。</td>
</tr>
<tr>
<td>-S program</td>
<td>指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</td>
</tr>
</tbody>
</table>
<h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><ol>
<li>获取服务器上文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@192.168.1.20:&#x2F;home&#x2F;backups&#x2F;1.png &#x2F;media&#x2F;bruce&#x2F;backups&#x2F;1.png</span><br></pre></td></tr></table></figure>
<p>按回车键：</p>
<p>如果是第一次试用scp，会提示是否使用传输，输入yes，回车；</p>
<p>然后接着提示输入root用户的密码（输入密码时是看不到字符出现的，输入好直接回车）</p>
<ol start="2">
<li>获取服务器上的目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@192.168.1.20:&#x2F;home&#x2F;backups&#x2F; &#x2F;media&#x2F;bruce&#x2F;backups&#x2F;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>将本地文件上传至服务器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp &#x2F;media&#x2F;bruce&#x2F;backups&#x2F;2.png root@192.168.1.20:&#x2F;home&#x2F;backups&#x2F;2.png</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>将本地目录上传至服务器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r &#x2F;media&#x2F;bruce&#x2F;backups&#x2F; root@192.168.1.20:&#x2F;home&#x2F;backups&#x2F;</span><br></pre></td></tr></table></figure>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SCP </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始搭建自己的博客天地(下)]]></title>
      <url>/posts/3337762157/</url>
      <content type="html"><![CDATA[<p><strong>建站，重在折腾：</strong></p>
<p>在建站这个系列中，上一篇主要讲了怎么搭建博客环境，初始化博客项目，怎么新增博文，以及怎么部署博客。本次主要讲解一下<code>config.yml</code>文件，怎么巧妙的使用<code>HTTPS</code>的图床，还有就是听起来高大尚的<strong>绑定域名</strong>。</p>
<a id="more"></a>
<p>上次在《从零开始搭建自己的博客天地(上)》中讲过Coding建站的文章，时隔那么久，估计很多小伙伴都遗忘了，这里提供了上篇文章的<a href="https://blog.brucekong.com/posts/3667539278/">链接</a>，或者使用站内搜索功能 [Ctrl+F]：从零开始搭建自己的博客天地(上) ，阅读上篇之后再读此篇效果更好。</p>
<h2 id="解析config-yml文件"><a href="#解析config-yml文件" class="headerlink" title="解析config.yml文件"></a>解析config.yml文件</h2><p>关于其中的参数，大家可以参照官网提供的教程（<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">中文</a>、<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">English</a>）<br>一般来讲，需要大家修改以下参数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">这个是你网站的标题</td>
</tr>
<tr>
<td style="text-align:left">subtitle</td>
<td style="text-align:left">这个是你网站的副标题</td>
</tr>
<tr>
<td style="text-align:left">description</td>
<td style="text-align:left">这个是你网站的描述信息</td>
</tr>
<tr>
<td style="text-align:left">author</td>
<td style="text-align:left">这个是你的名称</td>
</tr>
<tr>
<td style="text-align:left">url</td>
<td style="text-align:left">这个是你网站的地址</td>
</tr>
<tr>
<td style="text-align:left">theme</td>
<td style="text-align:left">这个是你引用哪个博客主题，设置为false表示不使用主题</td>
</tr>
<tr>
<td style="text-align:left">deploy</td>
<td style="text-align:left">这个是你想把博客部署到哪个托管平台上</td>
</tr>
</tbody>
</table>
<h2 id="使用图床管理博文图片"><a href="#使用图床管理博文图片" class="headerlink" title="使用图床管理博文图片"></a>使用图床管理博文图片</h2><p>当前使用比较多的图床系统包括七牛、又拍云、新浪、极简图床，其中七牛和又拍云是收费图床，后面两个是免费的，知乎大佬都给过说明，好与坏戳<a href="https://www.zhihu.com/question/21667151/answer/74657827" target="_blank" rel="noopener">我</a>。</p>
<p>图床是有了，但是支不支持HTTPS又是另一回事，关于这个问题，放给大家去研究，这里不再细说。</p>
<p>当然对于小白（比如我）来说，使用Coding仓库作为图床也是不错的，而且还支持HTTPS，但是唯一的缺点就是速度太慢了。</p>
<p>使用Coding方法：</p>
<ul>
<li>在Coding中新建一个仓库，例如叫images；</li>
<li>clone仓库到本地，将图片添加到仓库，并push到Coding；</li>
<li>打开网页端的images仓库，点击需要的使用的图片，得到链接（url）；</li>
<li>将url中的blob改成raw即可使用。</li>
</ul>
<p>这个方法不推荐使用，有条件的还是使用七牛，毕竟速度还是有保障的。</p>
<h2 id="域名使用"><a href="#域名使用" class="headerlink" title="域名使用"></a>域名使用</h2><p>为了让自己的博客显得更高大尚的话，可以将自己的博客绑定自己的域名。</p>
<p>在个人博客中使用域名，首先要购买一个域名，域名根据不同的组合，价格不一样，当然也有免费的。根据个人使用经验，不建议使用免费的，常言道：免费的既是最贵的。因为在大多数情况下，域名就代表了你的博客，但是大部分免费域名只是免费一年，之后是需要购买的，域名到期后，很多人都觉得不值得续费，但是又有很多信息都是绑定的这个域名，从而陷入两难的境地。所以我建议大家好好考虑，尽量购买一个自己中意的，能长期使用的域名。</p>
<p>罗里吧嗦了那么多，小编总结了以下几点：</p>
<ul>
<li>一定是自己中意的，并能保证持续使用的</li>
</ul>
<ul>
<li>尽量购买<code>com</code>、<code>net</code>、<code>site</code>、<code>cc</code>、<code>top</code>、<code>club</code>等一级域名作为博客域名</li>
<li>域名越短越好</li>
<li>尽量只使用字母或数字</li>
<li>域名能有一定的含义或容易记住</li>
</ul>
<p>小编是在阿里云上购买的域名，那小编就讲述一下自己是怎么将自己的域名绑定到自己的博客上的。</p>
<ul>
<li>首先，登陆阿里云官网，注册账号并登陆，并在<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>上购买自己心仪的域名</li>
<li>然后，打开“控制台”（右上角处），在左侧列表中找到倒数第二行“域名与网站”，点击“云解析DNS”</li>
<li>在右侧看到购买的域名，点击“解析设置”</li>
<li>为确保成功，先删除所有的解析设置</li>
<li>点击右上角的”添加解析“，记录类型选择”CNAME“，主机记录填入”@“，解析路线默认即可，记录值填入”demo.coding.me”，确认即可。</li>
</ul>
<p><strong>注意：以上的所填内容，只填引号内部的</strong></p>
<p>到此，稍等半小时，等待解析设置生效。</p>
<p>然后去设置Coding中博客：</p>
<ul>
<li>在<code>博客根目录/source</code>下新建一个CNAME文本，输入你的域名（例如demo.com），push到Coding中</li>
<li>打开<code>https://coding.net/u/demo/p/demo.coding.me/git/pages/static</code>，在“自定义域名”处绑定自己的域名即可。</li>
</ul>
<p>稍等片刻，在浏览器中打开你的域名（demo.com），不出意外就能解析到你的博客了。</p>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Nginx和OpenSSL搭建本地HTTPS的ArcGIS for JavaScript 4.6]]></title>
      <url>/posts/2692255794/</url>
      <content type="html"><![CDATA[<p><strong>HTTPS的初试：</strong><br>前两天看谷歌开发者公众号了解到Google Chrome要在68这个版本时彻底将HTTP网站列为不安全，要求全部网站都要支持HTTPS，由此萌生了先在本地搭建一些HTTPS的站点的想法。</p>
<a id="more"></a>
<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>由于工作任务，最近一直在写本子，了解了一些GIS方面的小知识，但是学的很浅显，其中就包括ArcGIS for JavaScript。基于谷歌公众号里面的启发，就想着在本地搭建一个HTTPS结构的ArcGIS for JavaScript站点。</p>
<h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h2><ul>
<li>Nginx <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载</a></li>
<li>OpenSSL <a href="http://down-www.7down.net/pcdown/soft/W/win64openssl.rar" target="_blank" rel="noopener">下载</a></li>
<li>ArcGIS for JavaScript 4.6 <a href="https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript&amp;version=4.6" target="_blank" rel="noopener">下载</a></li>
</ul>
<p><strong><em>注意：下载ArcGIS for JavaScript前，先在<a href="https://developers.arcgis.com" target="_blank" rel="noopener">https://developers.arcgis.com</a>注册ArcGIS账号</em></strong></p>
<h2 id="3-安装配置"><a href="#3-安装配置" class="headerlink" title="3 安装配置"></a>3 安装配置</h2><h3 id="3-1-Nginx"><a href="#3-1-Nginx" class="headerlink" title="3.1 Nginx"></a>3.1 Nginx</h3><p>下载好Nginx后，解压到<code>C:\</code>，得到<code>nginx.exe</code>在<code>C:\nginx\</code>根目录下，并将<code>C:\nginx</code>添加到系统环境变量的<code>PATH</code>中，即可完成Nginx的安装和配置。</p>
<h3 id="3-2-OpenSSL"><a href="#3-2-OpenSSL" class="headerlink" title="3.2 OpenSSL"></a>3.2 OpenSSL</h3><p>下载好OpenSSL后，双击安装，将安装目录设置为<code>C:\</code>中，安装后即为<code>C:\OpenSSL-Win64</code>，同理将<code>C:\OpenSSL-Win64\bin</code>添加到系统环境变量的<code>PATH</code>中，即可完成Nginx的安装和配置。</p>
<h3 id="3-3-ArcGIS-for-JavaScript-4-6"><a href="#3-3-ArcGIS-for-JavaScript-4-6" class="headerlink" title="3.3 ArcGIS for JavaScript 4.6"></a>3.3 ArcGIS for JavaScript 4.6</h3><p>下载好ArcGIS for JavaScript 4.6后，解压到<code>C:\nginx\html\</code>中，得到一个<code>C:\nginx\html\arcgis_js_api\library\4.6\</code>类似的目录。和往常一样，需要修改<code>init.js</code>和<code>dojo.js</code>中的域名信息。</p>
<p>将init.js和dojo.js中的以下的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseUrl:&quot;https:&#x2F;&#x2F;[HOSTNAME_AND_PATH_TO_JSAPI]dojo&quot;</span><br></pre></td></tr></table></figure><br>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baseUrl:&quot;http:&#x2F;&#x2F;localhost&#x2F;arcgis_js_api&#x2F;library&#x2F;4.6&#x2F;dojo&quot;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">baseUrl:&quot;https:&#x2F;&#x2F;localhost&#x2F;arcgis_js_api&#x2F;library&#x2F;4.6&#x2F;dojo&quot;</span><br></pre></td></tr></table></figure><br><strong> 注意：<del>将https改为http</del>  这里不改也是可以的 </strong></p>
<p>自此，安装配置即已经完成，下一步需要生成并在Nginx中配置证书。</p>
<h2 id="4-证书的生成与配置"><a href="#4-证书的生成与配置" class="headerlink" title="4 证书的生成与配置"></a>4 证书的生成与配置</h2><h3 id="4-1生成证书"><a href="#4-1生成证书" class="headerlink" title="4.1生成证书"></a>4.1生成证书</h3><p>在网上查资料，有大佬是这样子做的（先不要照抄这里，继续看下面的）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -x509 -newkey rsa:2048 -out LocalhostCA.cer -outform PEM -keyout LocalhostCA.pvk -days 10000 -verbose -config LocalhostCA.cnf -nodes -sha256 -subj &quot;&#x2F;CN&#x3D;localhost CA&quot;</span><br><span class="line"></span><br><span class="line">$ openssl req -newkey rsa:2048 -keyout Localhost.pvk -out Localhost.req -subj &#x2F;CN&#x3D;localhost -sha256 -nodes</span><br><span class="line"></span><br><span class="line">$ openssl x509 -req -CA LocalhostCA.cer -CAkey LocalhostCA.pvk -in Localhost.req -out Localhost.cer -days 10000 -extfile Localhost.ext -sha256 -set_serial 0x1111</span><br></pre></td></tr></table></figure>
<p>首先在<code>C:\OpenSSL-Win64\bin</code>新建两个文件：<br>第一个文件<code>LocalhostCA.cnf</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[ req ]</span><br><span class="line">distinguished_name  &#x3D; req_distinguished_name</span><br><span class="line">x509_extensions     &#x3D; root_ca</span><br><span class="line"></span><br><span class="line">[ req_distinguished_name ]</span><br><span class="line">countryName             &#x3D; CN</span><br><span class="line">countryName_min         &#x3D; 2</span><br><span class="line">countryName_max         &#x3D; 2</span><br><span class="line">stateOrProvinceName     &#x3D; Ji Nan</span><br><span class="line">localityName            &#x3D; Ji Nan</span><br><span class="line">0.organizationName      &#x3D; TelChina</span><br><span class="line">organizationalUnitName  &#x3D; GIS Engineer</span><br><span class="line">commonName              &#x3D; localhost</span><br><span class="line">commonName_max          &#x3D; 64</span><br><span class="line">emailAddress            &#x3D; kongbin0325@hotmail.com</span><br><span class="line">emailAddress_max        &#x3D; 64</span><br><span class="line"></span><br><span class="line">[ root_ca ]</span><br><span class="line">basicConstraints            &#x3D; critical, CA:true</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:left">配置项</th>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">distinguished_name</td>
<td style="text-align:left">req_distinguished_name</td>
<td style="text-align:left">不用管，反正我没改</td>
</tr>
<tr>
<td style="text-align:left">x509_extensions</td>
<td style="text-align:left">root_ca</td>
<td style="text-align:left">X.509证书的扩展项(我瞎说的)</td>
</tr>
<tr>
<td style="text-align:left">countryName</td>
<td style="text-align:left">CN</td>
<td style="text-align:left">国家缩写，必须是两个字母</td>
</tr>
<tr>
<td style="text-align:left">countryName_min</td>
<td style="text-align:left">2</td>
<td style="text-align:left">就写2吧</td>
</tr>
<tr>
<td style="text-align:left">countryName_max</td>
<td style="text-align:left">2</td>
<td style="text-align:left">也是2。。。</td>
</tr>
<tr>
<td style="text-align:left">stateOrProvinceName</td>
<td style="text-align:left">ShanDong</td>
<td style="text-align:left">所在省</td>
</tr>
<tr>
<td style="text-align:left">localityName</td>
<td style="text-align:left">Ji Nan</td>
<td style="text-align:left">所在市</td>
</tr>
<tr>
<td style="text-align:left">0.organizationName</td>
<td style="text-align:left">TelChina</td>
<td style="text-align:left">所在公司</td>
</tr>
<tr>
<td style="text-align:left">organizationalUnitName</td>
<td style="text-align:left">GIS Engineer</td>
<td style="text-align:left">职位</td>
</tr>
<tr>
<td style="text-align:left">commonName</td>
<td style="text-align:left">localhost</td>
<td style="text-align:left">自己的域名</td>
</tr>
<tr>
<td style="text-align:left">commonName_max</td>
<td style="text-align:left">64</td>
<td style="text-align:left">我抄的</td>
</tr>
<tr>
<td style="text-align:left">emailAddress</td>
<td style="text-align:left"><a href="mailto:kongbin0325@hotmail.com">kongbin0325@hotmail.com</a></td>
<td style="text-align:left">邮箱</td>
</tr>
<tr>
<td style="text-align:left">emailAddress_max</td>
<td style="text-align:left">64</td>
<td style="text-align:left">还是抄的</td>
</tr>
<tr>
<td style="text-align:left">basicConstraints</td>
<td style="text-align:left">critical, CA:true</td>
<td style="text-align:left">照着我的写就行！</td>
</tr>
</tbody>
</table>
<p><strong> 注意：countryName和 commonName要特别注意，其他的都OK ！ </strong></p>
<p>第二个文件<code>Localhost.ext</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line">extendedKeyUsage &#x3D; serverAuth</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1   &#x3D; localhost</span><br></pre></td></tr></table></figure><br>| 配置项 | 值 | 描述 |<br>| :— | :———- | :————- |<br>| subjectAltName | @alt_names | 不用管，反正我没改 |<br>| extendedKeyUsage | serverAuth | 不用管，反正我没改 |<br>| DNS.1 | localhost | 设置域名 |<br>| DNS.2 | 123.123.32.34 | 懂吧，可以设置多个域名（这个IP是我瞎写的） |</p>
<p>然后，在<code>C:\OpenSSL-Win64\bin</code>中打开<code>cmd</code>，准备执行上面三条语句。但是第一条语句就报了错，发现无法生成<em>.cer和</em>.req文件（估计是软件版本问题导致的），又是百度，又是谷歌，还是Stack Overflow的，消耗了不少时间。最后根据以下报错信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Subject does not start with <span class="string">"/"</span></span><br><span class="line">Problems makeing certificate request</span><br></pre></td></tr></table></figure><br>我尝试着将<code>-subj</code>参数删除，执行了一次，提示我输入<code>Localhost.cnf</code>文件中<code>req_distinguished_name</code>的配置项（按照提示重新输入一次就可以了）。以此执行如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -x509 -newkey rsa:2048 -out LocalhostCA.cer -outform PEM -keyout LocalhostCA.pvk -days 10000 -verbose -config LocalhostCA.cnf -nodes -sha256</span><br></pre></td></tr></table></figure><br>同理，第二条语句也把<code>-subj</code>参数删除，执行过程中需要输入一些参数，最后执行成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -newkey rsa:2048 -keyout Localhost.pvk -out Localhost.req -sha256 -nodes</span><br></pre></td></tr></table></figure><br>第三条语句没有<code>-subj</code>选项，直接执行即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -CA LocalhostCA.cer -CAkey LocalhostCA.pvk -in Localhost.req -out Localhost.cer -days 10000 -extfile Localhost.ext -sha256 -set_serial 0x1111</span><br></pre></td></tr></table></figure></p>
<h3 id="4-2-配置证书和Nginx"><a href="#4-2-配置证书和Nginx" class="headerlink" title="4.2 配置证书和Nginx"></a>4.2 配置证书和Nginx</h3><p>将生成的Localhost.cer和Localhost.pvk文件复制到Nginx的conf目录中。<br>修改nginx.conf文件，添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">server&#123;  </span><br><span class="line">    listen 443;  </span><br><span class="line">    server_name localhost;  </span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate Localhost.cer;  </span><br><span class="line">    ssl_certificate_key Localhost.pvk; </span><br><span class="line">    ssl_session_timeout 5m;  </span><br><span class="line">    ssl_protocols SSLv2 SSLv3 TLSv1;  </span><br><span class="line">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;  </span><br><span class="line">    ssl_prefer_server_ciphers on;  </span><br><span class="line">    add_header &#39;Access-Control-Allow-Headers&#39; &#39;Content-Type&#39;;  </span><br><span class="line">    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;  </span><br><span class="line">    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET&#39;;  </span><br><span class="line">     </span><br><span class="line">    location &#x2F; &#123;  </span><br><span class="line">        root html; </span><br><span class="line">        index index.html 50x.html;  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-3-重启Nginx"><a href="#4-3-重启Nginx" class="headerlink" title="4.3 重启Nginx"></a>4.3 重启Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure>
<h3 id="4-4-导入证书"><a href="#4-4-导入证书" class="headerlink" title="4.4 导入证书"></a>4.4 导入证书</h3><p>在IE中打开Internet选项 -&gt; 内容 -&gt; 证书 -&gt; 受信任的根证书颁发机构  -&gt; 导入 -&gt; LocalhostCA.cer。<br>尝试访问<code>https://localhost/arcgis_js_api/library/4.6/init.js</code>，在网址的左侧显示一个小绿锁则表示HTTPS配置成功，自此所有配置过程都已经完成。</p>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<p><hr></p>
<div style="text-align: center;font-weight: bold;"><br>    全文重点来了！<br></div>

<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值此3.8女神节，祝福所有的女性：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forever; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Happiness Everyday!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> gis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GIS </tag>
            
            <tag> Nginx </tag>
            
            <tag> OpenSSL </tag>
            
            <tag> 代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[吾爱破解论坛2018年3月13日十周年开放注册通知]]></title>
      <url>/posts/224769818/</url>
      <content type="html"><![CDATA[<p><strong>吾爱破解论坛注册喜讯：</strong><br>说起吾爱，小白的福利，老司机的神站，每个人都想拥有一个账号。吾爱破解论坛值此十周年之际，开放了注册功能，有需要的小伙伴千万不要再错过了。</p>
<a id="more"></a>
<div style="text-align: center;font-weight: bold;font-size: 2rem; color: red"><br>    喜讯、喜讯、喜讯<br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    <span>吾爱破解论坛开通开放注册</span><br>    <span>2018年3月13日12:00-14:00和20:00-22:00</span><br></div><div style="text-align: center;font-weight: bold;font-size: 1.5rem;padding-top: 0;margin-top: 0;height: 106px;line-height: 106px"><a href="https://www.52pojie.cn/?fromuid=575811" target="_blank" rel="noopener" style="text-align: center;">我要吾爱</a></div><br><div></div><br><strong><em>注册注意事项：</em></strong><br><br>1. 注意不要错过注册时间<br>2. 认真读注册须知（需要等10分钟）<br>3. 事先把注册信息写在本子或word里（独一无二的邮箱和用户名） <a href="https://www.52pojie.cn/misc.php?mod=faq&amp;action=faq&amp;id=15&amp;messageid=16" target="_blank" rel="noopener">需要准备什么</a><br>4. 耐心检查填写内容（看是否都符合要求）<br>5. 邮箱验证阶段，有的要到邮箱的垃圾箱中查看有没有验证邮件，而有的邮箱则需要设置白名单才能收到验证邮件 <a href="https://www.52pojie.cn/thread-98585-1-1.html" target="_blank" rel="noopener">帮助</a><br><br><div style="text-align: center;font-weight: bold;font-size: 1.5rem"><br>    祝愿小伙伴们都能获得自己的吾爱账号！<br></div><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 活动 </tag>
            
            <tag> 吾爱破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx学习入门]]></title>
      <url>/posts/547195145/</url>
      <content type="html"><![CDATA[<p><strong>Nginx让系统部署花样百出：</strong><br>在系统部署时，遇到了一个需要多方考虑的安全问题，出于架构师老大的一句话，说先用Nginx做下代理（后来讨论，此方法治标不治本，就放弃了此方法，但是Nginx还是看了那么一会儿），菜鸟如我百度谷歌一番，稍微了解了一些Nginx的最基本用法。</p>
<a id="more"></a>
<h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><p>上面已经说了是大佬的一句话，其实在此之前我也使用过一些简单的反向代理，解决跨域问题（学的就是毛毛雨），在生产环境中还没真正使用过。那么老大说道了Nginx，那学习之前得了解Nginx是什么？能做什么，优势是什么？</p>
<p><strong>是什么</strong></p>
<p>是一个高性能的<a href="https://baike.baidu.com/item/HTTP" target="_blank" rel="noopener">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">反向代理</a>服务器，也是一个IMAP/POP3/SMTP服务器。</p>
<p><strong>能做什么？</strong></p>
<ul>
<li>反向代理</li>
<li>正向代理</li>
<li>HTTP服务器</li>
<li>负载均衡（什么鬼，，，）</li>
</ul>
<p><strong>优势有哪些？</strong></p>
<ul>
<li>轻量web服务器</li>
<li>适合做静态请求和反向（不适合做动态请求，动态用apache）</li>
<li>抗高并发，nginx 处理请求异步非阻塞，使用较低的资源支持更高的并发数</li>
<li>负载均衡</li>
</ul>
<h2 id="location配置"><a href="#location配置" class="headerlink" title="location配置"></a>location配置</h2><p> 以下内容只讲了自己用到的，在讲解方面可能没有那么标准，差不多都是自己理解和实践的，希望能让大家更容易理解和使用吧！</p>
<p>基本语法：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> [=|~|~*|^~] /uri/ &#123; </span><br><span class="line">  … </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>= 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。</li>
<li>~ 为区分大小写匹配(可用正则表达式)</li>
<li>!~为区分大小写不匹配</li>
<li>~* 为不区分大小写匹配(可用正则表达式)</li>
<li>!~*为不区分大小写不匹配</li>
<li>^~ 如果把这个前缀用于一个常规字符串,那么告诉nginx 如果路径匹配那么不测试正则表达式。</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">root</span>   html;</span><br><span class="line">  <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用root、alias和proxy-pass"><a href="#使用root、alias和proxy-pass" class="headerlink" title="使用root、alias和proxy_pass"></a>使用root、alias和proxy_pass</h2><p>由于最近在看<a href="http://www.layui.com" target="_blank" rel="noopener">layui</a>的一些东西（不是广告），就顺手拿来做个演示！（以下提到的layui，指的是layui官方提供<a href="http://www.layui.com/template/fly/" target="_blank" rel="noopener">社区模板</a>的html目录。</p>
<p>阅读到这时，如果你还没有nginx环境，请点击<a href="">下载</a>搭建你的环境，</p>
<ul>
<li>点击<a href="http://nginx.org" target="_blank" rel="noopener">Nginx官网</a>，点击最新带有<code>mainline version</code>字样的链接，建议下载<code>Stable version</code>版本；</li>
<li>下载得到一个zip包，解压到你想放置的目录，双击启动<code>nginx.exe</code></li>
</ul>
<blockquote>
<p> <em>另外再说明一下实践的环境，本地解析使用的80端口，反向代理转发的url不带端口</em></p>
<p> <em>以下代码均在<code>nginx/conf/</code>文件夹下的<code>nginx.conf</code>文件中修改</em></p>
<p> <em>在修改保存<code>nginx.conf</code>后，记得使用<code>nginx -s reload</code>重载配置文件，使其生效</em></p>
</blockquote>
<p>使用alias 设置本地虚拟目录，后面必须加上 / ，alias 指定本地目录，例如Windows系统上设置为 <code>D:/html/app/</code>，若是使用mac或linux，路径最后也要加上 / ，例如 <code>~/html/app/</code> or <code>/home/bruce/html/app/</code>。</p>
<p>以下两个方法都能跳转到layui中，这个相当于直接访问 <code>D:/ComSoftwares/nginx-1.13.7/html/layui</code>目录，可以理解为在root目录下，访问layui目录：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /layui &#123;</span><br><span class="line">	<span class="attribute">root</span> D:/ComSoftwares/nginx-<span class="number">1</span>.<span class="number">13</span>.<span class="number">7</span>/html/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问<code>localhost/alayui</code>或<code>localhost/alayui/</code>自动代理到<code>D:/ComSoftwares/nginx-1.13.7/html/layui/</code>目录下</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /alayui &#123;</span><br><span class="line">	<span class="attribute">alias</span> D:/ComSoftwares/nginx-<span class="number">1</span>.<span class="number">13</span>.<span class="number">7</span>/html/layui/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>=</code> 匹配访问链接 只能匹配<code>localhost/blayui</code>或者<code>localhost/blayui/</code>，对于子目录无法进行访问<br>即对<code>localhost/blayui/jie/add.html</code> 无法进行访问<br>可以看出 = 是严格匹配</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /blayui/ &#123;</span><br><span class="line">	<span class="attribute">proxy_pass</span> http://localhost/layui/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三种方法的利弊：</p>
<ul>
<li>第一种和没设置一样（ 为了学习root）</li>
<li>第二种根据访问的链接，去代理到一定的目录下，即代理了当前链接，又代理了子目录</li>
<li>第三种只严格匹配了当前链接，对于子目录无法进行访问</li>
</ul>
<blockquote>
<p> <em>推荐使用第二种：alias方法</em></p>
</blockquote>
<h2 id="使用rewrite、proxy-pass和正则表达式"><a href="#使用rewrite、proxy-pass和正则表达式" class="headerlink" title="使用rewrite、proxy_pass和正则表达式"></a>使用rewrite、proxy_pass和正则表达式</h2><p>下面的方法统一使用了正则表达式来解决访问链接<br>添加访问目录为<code>/apis</code>的代理配置，用<code>127.0.0.1:80/apis</code>重定向<a href="http://www.layui.com，" target="_blank" rel="noopener">http://www.layui.com，</a><br>在ajax中访问<code>/apis/demo/table/user</code>,相当于访问<a href="http://www.layui.com/demo/table/user" target="_blank" rel="noopener">http://www.layui.com/demo/table/user</a></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /apis &#123;</span><br><span class="line">  <span class="attribute">rewrite</span> <span class="regexp"> ^/apis/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_pass</span>   http://www.layui.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 参考学习 <a href="http://blog.csdn.net/tjcyjd/article/details/50897959" target="_blank" rel="noopener">http://blog.csdn.net/tjcyjd/article/details/50897959</a></p>
</blockquote>
<p>总的来说，alias使用简单粗暴，转发本地目录；而正则表达式使用起来更爽，处理的情况更多，让更多事情变得简单，运行高效，低资源占用，代理强大的处理方法。</p>
<p>由于学习Nginx的时间有限，只针对自己遇到的问题进行了研究，如若有不对或不合适的地方，请批评指正，谢谢！<br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 代理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cesium简介与环境搭建]]></title>
      <url>/posts/3718307484/</url>
      <content type="html"><![CDATA[<p><strong>Cesium的Web 3DGIS应用：</strong><br>Cesium是WebGIS领域的一个很重要的方向，它具有开源，更新快、、跨平台、跨浏览器和无需插件支持的Web 3DGIS引擎，在地里信息行业有着很好的应用前景。</p>
<a id="more"></a>
<h2 id="Cesium简介"><a href="#Cesium简介" class="headerlink" title="Cesium简介"></a>Cesium简介</h2><div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/cesium-office-site.png" alt="Cesium"></div>

<blockquote>
<p>官网介绍</p>
<p>Cesium is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization.</p>
</blockquote>
<p>简单来讲就是说，Cesium是一个可以同时支持2D和 3D地图的引擎，无需浏览器插件支持的JavaScript开发库。但是浏览器必须支持WebGL，不然就是扯淡、免谈，而且Cesium能使用本地硬件加速图形渲染，具有跨平台、跨浏览器的特性，另外还可以优化动态数据的可视化。（对于英语没过六级的人，表示翻译压力有点大，看不懂的请移步）</p>
<p>Cesium支持三维地球（3D），二维地图（2D）以及2.5D哥伦布视图（2.5D），还可以实现基于时间轴的动态数据展示</p>
<h2 id="Cesium优缺点"><a href="#Cesium优缺点" class="headerlink" title="Cesium优缺点"></a>Cesium优缺点</h2><p><strong>优点：</strong></p>
<ul>
<li>开源</li>
<li>框架更新迭代周期短</li>
<li>无需插件支持</li>
<li>跨平台、跨浏览器</li>
<li>地图数据展示效果比较好</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>和商业软件相比，三维分析处理相对较弱</li>
<li>地图组件不够全面</li>
</ul>
<h2 id="搭建Cesium开发环境"><a href="#搭建Cesium开发环境" class="headerlink" title="搭建Cesium开发环境"></a>搭建Cesium开发环境</h2><p>搭建环境向来不止一种方式，这里提供三种方式：一、npm安装；二、Github下载；三、依赖第三方发布组件</p>
<h3 id="下载Cesium组件"><a href="#下载Cesium组件" class="headerlink" title="下载Cesium组件"></a>下载Cesium组件</h3><h4 id="npm下载"><a href="#npm下载" class="headerlink" title="npm下载"></a>npm下载</h4><p>这是一种官网推荐的方式，在当前前端React、Angular、Vue三足鼎立的时期，基于npm安装组件的项目越来越多，Cesium官方也推送了npm下载方式：<code>npm install cesium</code>(默认你已经配置了node.js和npm环境)，执行后，会在当前目录下看到一个<code>node_moudles</code>文件夹，里面有下载下来的cesium依赖包，具体目录在<code>node_modules\cesium\Build\Cesium</code>中，也可以将Cesium文件夹拷贝出来，放到工程中使用。</p>
<h4 id="Github下载"><a href="#Github下载" class="headerlink" title="Github下载"></a>Github下载</h4><p>在Github中找组件，一般方式为：</p>
<ul>
<li>打开Cesium在Github上的<a href="https://github.com/AnalyticalGraphicsInc/cesium" target="_blank" rel="noopener">链接</a>，直接点击<code>clone or download</code>选择<code>download zip</code>即可下载Cesium工程文件；</li>
<li>如果系统中安装了Git环境，可以使用以下方法获取：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/AnalyticalGraphicsInc/cesium.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是本文建议大家，在找到自己想要使用的组件时，尽量去<code>releases</code>下面去下载发布版本，这样的版本更加稳定。</p>
</blockquote>
<p>本文以下载<code>releases</code>中的zip包为例，</p>
<ul>
<li>打开<code>releases</code>的<a href="https://github.com/AnalyticalGraphicsInc/cesium/releases" target="_blank" rel="noopener">链接</a>，下载最新版本的zip包，解压到想要放置的文件夹下面</li>
<li>打开cmd命令终端，<code>cd</code>进入到Cesium文件夹下</li>
<li>使用<code>npm install</code>安装组件依赖</li>
<li><code>npm start</code>启动服务，打开浏览器访问<code>http://localhost:8080/</code>，可以看到一些入门链接和示例。</li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/cesium-office-demo.png" alt="Cesium"></div>

<p>以上是官方提供的学习链接，但是我要引用的组件呢？</p>
<p>细心的童鞋可能看到了根目录下有一个build目录，和<code>npm install cesium</code>下载下来的Cesium文件夹很相似，没错就是它，打开build会看到有三个目录<code>Cesium, CesiumUnminified, Documentation</code>，第一个文件夹是Cesium的未压缩版本的组件，第二个文件夹是经过压缩的组件，第三个文件夹是一些接口文档。</p>
<blockquote>
<p>一般开发期间引用未压缩版本，便于调试</p>
<p>部署发布期间使用压缩版本，结余流量，提高访问速度</p>
</blockquote>
<h4 id="第三方组件依赖"><a href="#第三方组件依赖" class="headerlink" title="第三方组件依赖"></a>第三方组件依赖</h4><p>博主也提供了第三方组件的依赖，虽规模不大，都是一些自己或者常用的一些组件。由于是刚建立，不管是功能还是组件库都比较少，后续会慢慢增加的，不仅加入自己上传的库，还会增加一些第三方的、使用CDN加速的库链接。</p>
<p>打开<a href="https://library.brucekong.com" target="_blank" rel="noopener">https://library.brucekong.com</a>，会看到当前库里面都有哪些组件，把鼠标移动到链接上，会自动选中该链接，直接按<code>Ctrl + C</code>就可以将链接复制，放到你需要引用的位置。</p>
<h3 id="引用库文件"><a href="#引用库文件" class="headerlink" title="引用库文件"></a>引用库文件</h3><p>前两种方法中，将Cesium文件夹放入到工程中，引用<code>Cesium/Cesium.js和Cesium/Widgets/Widgets.css</code>即可，第三种方法，直接将链接放入到<code>src</code>中即可。</p>
<h3 id="完成Hello-World"><a href="#完成Hello-World" class="headerlink" title="完成Hello World"></a>完成Hello World</h3><p>前两种都是使用本地文件引用形式，不在演示，只演示第三种，废话少说，直接上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use correct character set. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Tell IE to use the latest, best version. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://library.brucekong.com/cesium/1.41/Cesium.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(https://library.brucekong.com/cesium/<span class="number">1.41</span>/Widgets/widgets.css);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#cesiumContainer</span> &#123;</span></span><br><span class="line"><span class="undefined">          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cesiumContainer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/cesium-hello-world.png" alt="Cesium"></div>

<blockquote>
<p>注意，引用本地文件时，需要将工程放入到Tomcat、Nginx或Apache等web服务器中运行；如果不放进服务器中，直接运行将会报错，而引用第三方发布的组件不会出现这种情况。</p>
</blockquote>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cesium </tag>
            
            <tag> 3D Map </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始搭建自己的博客天地(上)]]></title>
      <url>/posts/3667539278/</url>
      <content type="html"><![CDATA[<p><strong>建站，重在折腾：</strong></p>
<p>之前提及过公网建站的文章（站内搜索[Ctrl+F]：Say you again），但是没有讲具体的流程，在踩过N个坑之后，在这里讲一下自己建站的经验，让更多的爱好者轻松完成建（折）站（腾）工作。下面开始唐僧念经时间~</p>
<a id="more"></a>
<h2 id="站点准备"><a href="#站点准备" class="headerlink" title="站点准备"></a>站点准备</h2><p>要搭建个人博客，需要一些条件的支持，一般包括如下内容：</p>
<ul>
<li><a href="https://github.com" target="_blank" rel="noopener">GitHub</a>、<a href="https://coding.net" target="_blank" rel="noopener">Coding</a>、<a href="https://gitlab.com" target="_blank" rel="noopener">Gitlab</a>、<a href="https://gitee.com" target="_blank" rel="noopener">Gitee</a>等支持Pages服务的代码托管平台</li>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes of Hexo</a></li>
</ul>
<div style="text-align: center"><img src="https://brucekong-com.gitee.io/images/gits.png" alt="hexo-theme"></div>


<p>首先在第一个选项中选择一个适合自己的托管平台，我是从GitHub到Gitee，再到Coding。当时刚接触Hexo时，只想着能在公网访问自己的博客就算成功了，然后就在GitHub上部署了自己的第一个站点（无奈太烂，只好解散）；后来，想着博客搞那么烂，有的还是搬砖搬过来的，还是体力活，站点源码就不开源了，中间用了一段时间Gitee；再后来，全世界都在HTTPS，都在使用自己的域名，那我也得跟得上潮流不是，所以综合考虑后就选择了Coding。为了少踩坑，本文就直接使用Coding作为平台进行说明。</p>
<p><em>托管平台大家可以自行选择，根据自己的需求，选择适合自己的就是最好的</em></p>
<p>然后去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题网站</a>，下载自己喜欢的主题样式，天生审美残缺，这里就不给推荐了，大家自行选择。</p>
<div style="text-align: center"><img src="https://brucekong-com.gitee.io/images/hexo-theme.png" alt="hexo-theme"></div>

<p>如果不是Git、Node.js小白，请跳过<strong>必备技能</strong>，直接进入<strong>站点配置</strong></p>
<h2 id="必备技能"><a href="#必备技能" class="headerlink" title="必备技能"></a>必备技能</h2><h3 id="Git安装与配置"><a href="#Git安装与配置" class="headerlink" title="Git安装与配置"></a>Git安装与配置</h3><p>参见<a href="https://blog.brucekong.com/posts/3219987363/">Git安装与配置</a></p>
<h3 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h3><p>参见<a href="https://blog.brucekong.com/posts/3412983070/">Node安装与配置</a></p>
<h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>当Git和Node.js安装配置好后，还要安装hexo组件，用来创建博客项目。</p>
<ul>
<li>使用cnpm安装Hexo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i hexo-cli -g</span><br></pre></td></tr></table></figure></li>
<li>使用hexo创建第一个博客：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li>
<li>进入blog，安装模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">cnpm i</span><br></pre></td></tr></table></figure></li>
<li>生成静态网页，启动服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
打开服务连接<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，最基本的博客项目就运行起来了，下一步就要对博客进行美化加工。</li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>参见<a href="https://blog.brucekong.com/posts/417703024/">Markdown学习入门</a></p>
<h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><p>找到好Hexo主题后，找到主题托管的工程，一般都会有一定的说明，以next主题为例：</p>
<ul>
<li>首先<code>cd</code>进入到<code>blog</code>根目录；<br><code>git clone https://github.com/hexojs/hexo-theme-next themes/next</code><br><code>next</code>主题就已经放入到<code>blog/themes</code>文件夹下了，如果不对<code>next</code>工程进行PR操作，或者为了减小<code>blog</code>的体积，可以把<code>next</code>文件夹下的.git文件夹删除。</li>
<li>打开<code>blog/_config.yml</code>文件<br>修改theme<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
<li>先清理已有的工程，重新生成静态网页，并启动服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">或者</span><br><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>
为确保没有浏览器缓存，我一般会加上<code>hexo clean</code>，其实只要页面不报错一般也是不需要的，打开服务连接<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，是不是发现博客主题已经改变了~~~</li>
</ul>
<h2 id="发布站点"><a href="#发布站点" class="headerlink" title="发布站点"></a>发布站点</h2><p>到这个时候，肯定有人说：“你讲了这么多，博客不还只是在本地用，哪里到公网访问了，哪里用到Coding了…”</p>
<div style="text-align: center;font-size: 2.5rem;padding: 20px;box-shadow: inset 0px 0px 30px red;display: none">客官，别急，这就来!</div><br><em> （假设你的用户名是demo）先到coding上新建一个<code>demo.coding.me</code>的项目，打开<code>https://coding.net/u/demo/p/demo.coding.me/git/pages/static</code>，开启<code>Pages服务</code>，Coding会自动帮你申请<code>HTTPS</code>，自此留着待用…
</em> 打开<code>blog/_config.yml</code>文件<br><em> 修改deploy参数，格式要严格遵守deploy参数（不知道的，可以<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">Hexo部署</a>获取帮助）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: git@git.coding.net:demo&#x2F;demo.coding.me.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: commit message</span><br></pre></td></tr></table></figure>
</em> 然后，打开Git Bash，cd到blog目录，执行：<br><code>hexo clean &amp; hexo g &amp; hexo d</code><br>注意：这个过程可能需要你输入账号密码，也可能没有-.-<br><em> 打开网页中的<code>demo.coding.me</code>仓库工程，刷新网页检查代码是否已经部署了；
</em> 成功后，打开<code>https://demo.coding.me</code>，如果未能打开，需等待几分钟等待Coding解析刚部署的网页。<br><br>## 新增博文<br><br>站点部署好后，要做到博客由访问量和活跃度需要及时更新博文，下面演示一下怎么新增一篇博文：<br><br><em> 首先cd到blog根目录
</em> 新增博文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;newpage&quot;     这是简写</span><br><span class="line">hexo new &quot;newpage&quot;   这是全拼</span><br></pre></td></tr></table></figure><br><em> 然后在blog/source/_posts文件夹中，出现一个<code>newpage.md</code>文档，并附带默认文章头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: newpage</span><br><span class="line">date: 2017-12-06 12:06:22</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</em> 尝试修改博文内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: newpage</span><br><span class="line">date: 2017-12-06 12:06:22</span><br><span class="line">tags: tips</span><br><span class="line">---</span><br><span class="line"># 我是一级标题</span><br><span class="line">## 我是二级标题</span><br><span class="line"></span><br><span class="line">* 我是列表1</span><br><span class="line">* 我是列表2</span><br><span class="line"></span><br><span class="line">！[我是图片](https:&#x2F;&#x2F;blog.brucekong.com&#x2F;favicon.png)</span><br><span class="line"></span><br><span class="line">[我是链接](https:&#x2F;&#x2F;blog.brucekong.com)</span><br><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;text-align: center;&quot;&gt;我是居中内容&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><br><em> 保存文档，本地查看博文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure><br>打开服务连接<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，检查博文板式是否符合你的预期效果
</em> 部署本篇博客到Coding服务器<br>在<code>blog/_config.yml</code>的deploy选项的message中填入本次提交的log文，一遍以后查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: git@git.coding.net:demo&#x2F;demo.coding.me.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: add a new article</span><br></pre></td></tr></table></figure><br>执行部署命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><br><em> 打开网页中的<code>demo.coding.me</code>工程，刷新网页检查代码是否已经部署了；
</em> 成功后，打开<code>https://demo.coding.me</code>，已经可以看到新增的博文了。<br><br>通过以上唠唠叨叨后，能实现最基本的Coding建站，新增博文，希望能对大家有所帮助！<br><br>本次主要完成了基于Hexo技术搭建的Coding Pages个人博客，实现了环境搭建、初始化博客项目、新增博文、部署博文，并是使用HTTPS进行访问。<br><br><strong>TODO：有待增加的包括（1）解析_config.yml参数，（2）使用图床管理博文图片，（3）绑定域名</strong><br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a><br><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用BeautifulSoup和pdfkit爬取菜鸟教程到pdf文件!]]></title>
      <url>/posts/1297890910/</url>
      <content type="html"><![CDATA[<p><strong>锋利的BeautifulSoup：</strong></p>
<p>BeautifulSoup是Python爬虫里面使用较为广泛的库，其主要功能是从网页中抓取数据，可以使用较少的代码实现完整的数据爬取工作。</p>
<a id="more"></a>
<h2 id="BeautifulSoup简介"><a href="#BeautifulSoup简介" class="headerlink" title="BeautifulSoup简介"></a>BeautifulSoup简介</h2><p>&emsp;&emsp;BeautifulSoup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。</p>
<h2 id="pdfkit简介"><a href="#pdfkit简介" class="headerlink" title="pdfkit简介"></a>pdfkit简介</h2><p>&emsp;&emsp;pdfkit是一个把HTML+CSS格式的文件转换成PDF格式文档的一种工具。它是对html转pdf工具包wkhtmltopdf的封装，所以必须要安装wkhtmltopdf，并将wkhtmltopdf的安装路径配置到系统环境PATH中。</p>
<blockquote>
<p>可以参考：<a href="http://blog.csdn.net/appleyuchi/article/details/70947138" target="_blank" rel="noopener">pdfkit与wkhtmltopdf的安装与使用</a></p>
</blockquote>
<h2 id="爬取的关键代码"><a href="#爬取的关键代码" class="headerlink" title="爬取的关键代码"></a>爬取的关键代码</h2><p>&emsp;&emsp;列举了一些共有变量和设置的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 比如爬取python3，网址：http:&#x2F;&#x2F;www.runoob.com&#x2F;python3&#x2F;python3-tutorial.html</span><br><span class="line"># 对该url进行拆分，对以下四个参数进行配置，一般只修改language</span><br><span class="line">language &#x3D; &#39;python3&#39;</span><br><span class="line">list_tag &#x3D; &#39;_top&#39;</span><br><span class="line">content_tag &#x3D; &#39;content&#39;</span><br><span class="line">path_wkthmltopdf &#x3D; r&#39;C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe&#39;</span><br><span class="line"># 以下参数不用配置</span><br><span class="line">child_url &#x3D; &#39;&#x2F;&#39; + language</span><br><span class="line">url_tag &#x3D; child_url + &#39;&#x2F;&#39;</span><br><span class="line">output_name &#x3D; u&quot;runoob_&quot; + language + r&quot;教程.pdf&quot;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;get_url_title_list方法：获取python的章节url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def get_url_title_list():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取所有URL和Title目录列表</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    root &#x3D; root_url</span><br><span class="line">    temp_child_url &#x3D; child_url</span><br><span class="line">    resp &#x3D; requests.get(root + temp_child_url)</span><br><span class="line">    resp.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">    soup &#x3D; BeautifulSoup(resp.text, &quot;html.parser&quot;)</span><br><span class="line">    x &#x3D; soup.find(&quot;div&quot;, class_&#x3D;&quot;design&quot;)</span><br><span class="line">    x &#x3D; x.find_all(&quot;a&quot;, target&#x3D;list_tag)</span><br><span class="line">    title &#x3D; []</span><br><span class="line">    url_path &#x3D; []</span><br><span class="line">    for i in x:</span><br><span class="line">        value &#x3D; i.string.strip()</span><br><span class="line">        title.append(value)</span><br><span class="line">        temp_href &#x3D; i.get(&#39;href&#39;).strip()</span><br><span class="line">        if temp_href.find(url_tag) &gt;&#x3D; 0:</span><br><span class="line">            href &#x3D; root + temp_href</span><br><span class="line">        else:</span><br><span class="line">            href &#x3D; root + temp_child_url + &#39;&#x2F;&#39; + temp_href</span><br><span class="line">        url_path.append(href)</span><br><span class="line">    return title, url_path</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;parse_url_to_html方法：将爬取的目标网页存储为html文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">def parse_url_to_html(url, name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    解析URL，返回HTML内容</span><br><span class="line">    :param url:解析的url</span><br><span class="line">    :param name: 保存的html文件名</span><br><span class="line">    :return: html</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D; requests.get(url)</span><br><span class="line">        soup &#x3D; BeautifulSoup(response.content, &#39;html.parser&#39;)</span><br><span class="line">        # 正文</span><br><span class="line">        body &#x3D; soup.find(id&#x3D;content_tag)</span><br><span class="line">        # 标题</span><br><span class="line">        title &#x3D; body.find(&#39;h1&#39;)</span><br><span class="line">        if title is None:</span><br><span class="line">            title &#x3D; body.find_all(&#39;h2&#39;)[0]</span><br><span class="line">            title_tag &#x3D; soup.new_tag(&#39;h1&#39;)</span><br><span class="line">            title_tag.string &#x3D; title.string</span><br><span class="line">            title &#x3D; title_tag</span><br><span class="line">        # 标题加入到正文的最前面，居中显示</span><br><span class="line">        center_tag &#x3D; soup.new_tag(&quot;center&quot;)</span><br><span class="line">        center_tag.insert(1, title)</span><br><span class="line">        body.insert(1, center_tag)</span><br><span class="line">        html &#x3D; str(body)</span><br><span class="line">        # body中的img标签的src相对路径的改成绝对路径</span><br><span class="line">        pattern &#x3D; &quot;(&lt;img .*?src&#x3D;\&quot;)(.*?)(\&quot;)&quot;</span><br><span class="line">        def func(m):</span><br><span class="line">            if not m.group(3).startswith(&quot;http&quot;):</span><br><span class="line">                if m.group(2).find(&#39;https&#39;) &gt;&#x3D; 0:</span><br><span class="line">                    return m.group(1) + m.group(2) + m.group(3)</span><br><span class="line">                if m.group(2).find(&#39;runoob.com&#39;) &gt;&#x3D; 0:</span><br><span class="line">                    rtn &#x3D; m.group(1) + &quot;http:&quot; + m.group(2) + m.group(3)</span><br><span class="line">                    print(rtn)</span><br><span class="line">                else:</span><br><span class="line">                    rtn &#x3D; m.group(1) + root_url + m.group(2) + m.group(3)</span><br><span class="line">                    print(rtn)</span><br><span class="line">                return rtn</span><br><span class="line">            else:</span><br><span class="line">                return m.group(1) + m.group(2) + m.group(3)</span><br><span class="line">        html &#x3D; re.compile(pattern).sub(func, html)</span><br><span class="line">        html &#x3D; html_template.format(content&#x3D;html)</span><br><span class="line">        html &#x3D; html.encode(&quot;utf-8&quot;)</span><br><span class="line">        with open(name, &#39;wb&#39;) as f:</span><br><span class="line">            f.write(html)</span><br><span class="line">        return name</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.error(&quot;解析错误&quot;, exc_info&#x3D;True)</span><br></pre></td></tr></table></figure>
<div align=center> <img src="https://brucekong-com.gitee.io/images/gen-html.png" alt="parse_url_to_html"> </div>

<p>&emsp;&emsp;save_pdf方法：将html文件转为pdf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def save_pdf(htmls, file_name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    把所有html文件保存到pdf文件</span><br><span class="line">    :param htmls:  html文件列表</span><br><span class="line">    :param file_name: pdf文件名</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    config &#x3D; pdfkit.configuration(wkhtmltopdf&#x3D;path_wkthmltopdf)</span><br><span class="line">    options &#x3D; &#123;</span><br><span class="line">        &#39;page-size&#39;: &#39;Letter&#39;,</span><br><span class="line">        &#39;margin-top&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;margin-right&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;margin-bottom&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;margin-left&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;encoding&#39;: &quot;UTF-8&quot;,</span><br><span class="line">        &#39;custom-header&#39;: [</span><br><span class="line">            (&#39;Accept-Encoding&#39;, &#39;gzip&#39;)</span><br><span class="line">        ],</span><br><span class="line">        &#39;cookie&#39;: [</span><br><span class="line">            (&#39;cookie-name1&#39;, &#39;cookie-value1&#39;),</span><br><span class="line">            (&#39;cookie-name2&#39;, &#39;cookie-value2&#39;),</span><br><span class="line">        ],</span><br><span class="line">        &#39;outline-depth&#39;: 10,</span><br><span class="line">    &#125;</span><br><span class="line">    pdfkit.from_file(htmls, file_name, options&#x3D;options, configuration&#x3D;config)</span><br></pre></td></tr></table></figure></p>
<div align=center><img src="https://brucekong-com.gitee.io/images/gen-pdf.png" alt="save_pdf"></div>

<p>&emsp;&emsp;append_pdf方法：拼接pdf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def append_pdf(input1, output1, bookmark):</span><br><span class="line">    bookmark_num &#x3D; output1.getNumPages()</span><br><span class="line">    print(bookmark_num)</span><br><span class="line">    for page_num in range(input1.numPages):</span><br><span class="line">        output1.addPage(input1.getPage(page_num))</span><br><span class="line"></span><br><span class="line">    output1.addBookmark(bookmark, bookmark_num)</span><br></pre></td></tr></table></figure><br>&emsp;&emsp;在上述方法执行完成后，执行以下代码，将拼接的pdf输出到本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output.write(open(output_name, &quot;wb&quot;))</span><br></pre></td></tr></table></figure></p>
<div align=center><img src="https://brucekong-com.gitee.io/images/gen-total-pdf.png" alt="append_pdf"></div>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-8-*-</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line">import logging</span><br><span class="line">import pdfkit</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from PyPDF2 import PdfFileWriter, PdfFileReader</span><br><span class="line">html_template &#x3D; &quot;&quot;&quot; </span><br><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt; </span><br><span class="line">&lt;head&gt; </span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; </span><br><span class="line">&lt;&#x2F;head&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">&#123;content&#125; </span><br><span class="line">&lt;&#x2F;body&gt; </span><br><span class="line">&lt;&#x2F;html&gt; </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">root_url &#x3D; &quot;http:&#x2F;&#x2F;www.runoob.com&quot;</span><br><span class="line"># 针对Runoob.com的爬虫示例</span><br><span class="line"># 列入要对该网站的python3进行爬虫,点开 python3，网址默认为：http:&#x2F;&#x2F;www.runoob.com&#x2F;python3&#x2F;python3-tutorial.html</span><br><span class="line"># 对该url进行拆分，对以下四个参数进行配置，一般只修改language</span><br><span class="line">language &#x3D; &#39;python3&#39;                                                      # 要爬虫的分类------针对不同的内容进行修改</span><br><span class="line">list_tag &#x3D; &#39;_top&#39;                                                         # 对左侧列表的class检索------一般不需要修改</span><br><span class="line">content_tag &#x3D; &#39;content&#39;                                                   # 对正文的id检索------一般不需要修改</span><br><span class="line">path_wkthmltopdf &#x3D; r&#39;C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf.exe&#39;    # 本地 wkhtmltopdf 的配置------根据自己电脑情况配置</span><br><span class="line"># 以下参数不用配置</span><br><span class="line">child_url &#x3D; &#39;&#x2F;&#39; + language                                                # 定义子url</span><br><span class="line">url_tag &#x3D; child_url + &#39;&#x2F;&#39;                                                 # url_tag是对左侧列表中的url出现特殊情况下的判断</span><br><span class="line">output_name &#x3D; u&quot;runoob_&quot; + language + r&quot;教程.pdf&quot;                          # 爬虫的文件名</span><br><span class="line">def parse_url_to_html(url, name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    解析URL，返回HTML内容</span><br><span class="line">    :param url:解析的url</span><br><span class="line">    :param name: 保存的html文件名</span><br><span class="line">    :return: html</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D; requests.get(url)</span><br><span class="line">        soup &#x3D; BeautifulSoup(response.content, &#39;html.parser&#39;)</span><br><span class="line">        # 正文</span><br><span class="line">        body &#x3D; soup.find(id&#x3D;content_tag)</span><br><span class="line">        # 标题</span><br><span class="line">        title &#x3D; body.find(&#39;h1&#39;)</span><br><span class="line">        if title is None:</span><br><span class="line">            title &#x3D; body.find_all(&#39;h2&#39;)[0]</span><br><span class="line">            title_tag &#x3D; soup.new_tag(&#39;h1&#39;)</span><br><span class="line">            title_tag.string &#x3D; title.string</span><br><span class="line">            title &#x3D; title_tag</span><br><span class="line">        # 标题加入到正文的最前面，居中显示</span><br><span class="line">        center_tag &#x3D; soup.new_tag(&quot;center&quot;)</span><br><span class="line">        center_tag.insert(1, title)</span><br><span class="line">        body.insert(1, center_tag)</span><br><span class="line">        html &#x3D; str(body)</span><br><span class="line">        # body中的img标签的src相对路径的改成绝对路径</span><br><span class="line">        pattern &#x3D; &quot;(&lt;img .*?src&#x3D;\&quot;)(.*?)(\&quot;)&quot;</span><br><span class="line">        def func(m):</span><br><span class="line">            if not m.group(3).startswith(&quot;http&quot;):</span><br><span class="line">                if m.group(2).find(&#39;https&#39;) &gt;&#x3D; 0:</span><br><span class="line">                    return m.group(1) + m.group(2) + m.group(3)</span><br><span class="line">                if m.group(2).find(&#39;runoob.com&#39;) &gt;&#x3D; 0:</span><br><span class="line">                    rtn &#x3D; m.group(1) + &quot;http:&quot; + m.group(2) + m.group(3)</span><br><span class="line">                    print(rtn)</span><br><span class="line">                else:</span><br><span class="line">                    rtn &#x3D; m.group(1) + root_url + m.group(2) + m.group(3)</span><br><span class="line">                    print(rtn)</span><br><span class="line">                return rtn</span><br><span class="line">            else:</span><br><span class="line">                return m.group(1) + m.group(2) + m.group(3)</span><br><span class="line">        html &#x3D; re.compile(pattern).sub(func, html)</span><br><span class="line">        html &#x3D; html_template.format(content&#x3D;html)</span><br><span class="line">        html &#x3D; html.encode(&quot;utf-8&quot;)</span><br><span class="line">        with open(name, &#39;wb&#39;) as f:</span><br><span class="line">            f.write(html)</span><br><span class="line">        return name</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.error(&quot;解析错误&quot;, exc_info&#x3D;True)</span><br><span class="line"># 要去除所有的div标签</span><br><span class="line"># 移除div（如果要移除a标签，把div换成a即可）</span><br><span class="line"># remove_tag(html, &quot;div&quot;)</span><br><span class="line">def remove_tag(text, tag):</span><br><span class="line">    return text[:text.find(&quot;&lt;&quot; + tag + &quot;&gt;&quot;)] + text[text.find(&quot;&lt;&#x2F;&quot; + tag + &quot;&gt;&quot;) + len(tag) + 3:]</span><br><span class="line">def get_url_title_list():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取所有URL和Title目录列表</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    root &#x3D; root_url</span><br><span class="line">    temp_child_url &#x3D; child_url</span><br><span class="line">    resp &#x3D; requests.get(root + temp_child_url)</span><br><span class="line">    resp.encoding &#x3D; &#39;utf-8&#39;</span><br><span class="line">    soup &#x3D; BeautifulSoup(resp.text, &quot;html.parser&quot;)</span><br><span class="line">    x &#x3D; soup.find(&quot;div&quot;, class_&#x3D;&quot;design&quot;)</span><br><span class="line">    x &#x3D; x.find_all(&quot;a&quot;, target&#x3D;list_tag)</span><br><span class="line">    title &#x3D; []</span><br><span class="line">    url_path &#x3D; []</span><br><span class="line">    for i in x:</span><br><span class="line">        value &#x3D; i.string.strip()</span><br><span class="line">        title.append(value)</span><br><span class="line">        temp_href &#x3D; i.get(&#39;href&#39;).strip()</span><br><span class="line">        if temp_href.find(url_tag) &gt;&#x3D; 0:</span><br><span class="line">            href &#x3D; root + temp_href</span><br><span class="line">        else:</span><br><span class="line">            href &#x3D; root + temp_child_url + &#39;&#x2F;&#39; + temp_href</span><br><span class="line">        url_path.append(href)</span><br><span class="line">    return title, url_path</span><br><span class="line">def save_pdf(htmls, file_name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    把所有html文件保存到pdf文件</span><br><span class="line">    :param htmls:  html文件列表</span><br><span class="line">    :param file_name: pdf文件名</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    config &#x3D; pdfkit.configuration(wkhtmltopdf&#x3D;path_wkthmltopdf)</span><br><span class="line">    options &#x3D; &#123;</span><br><span class="line">        &#39;page-size&#39;: &#39;Letter&#39;,</span><br><span class="line">        &#39;margin-top&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;margin-right&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;margin-bottom&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;margin-left&#39;: &#39;0.75in&#39;,</span><br><span class="line">        &#39;encoding&#39;: &quot;UTF-8&quot;,</span><br><span class="line">        &#39;custom-header&#39;: [</span><br><span class="line">            (&#39;Accept-Encoding&#39;, &#39;gzip&#39;)</span><br><span class="line">        ],</span><br><span class="line">        &#39;cookie&#39;: [</span><br><span class="line">            (&#39;cookie-name1&#39;, &#39;cookie-value1&#39;),</span><br><span class="line">            (&#39;cookie-name2&#39;, &#39;cookie-value2&#39;),</span><br><span class="line">        ],</span><br><span class="line">        &#39;outline-depth&#39;: 10,</span><br><span class="line">    &#125;</span><br><span class="line">    pdfkit.from_file(htmls, file_name, options&#x3D;options, configuration&#x3D;config)</span><br><span class="line">def append_pdf(input1, output1, bookmark):</span><br><span class="line">    bookmark_num &#x3D; output1.getNumPages()</span><br><span class="line">    print(bookmark_num)</span><br><span class="line">    for page_num in range(input1.numPages):</span><br><span class="line">        output1.addPage(input1.getPage(page_num))</span><br><span class="line">    output1.addBookmark(bookmark, bookmark_num)</span><br><span class="line">def main():</span><br><span class="line">    output &#x3D; PdfFileWriter()</span><br><span class="line">    start &#x3D; time.time()</span><br><span class="line">    file_name &#x3D; u&quot;temp_&quot;</span><br><span class="line">    result &#x3D; get_url_title_list()</span><br><span class="line">    titles &#x3D; result[0]</span><br><span class="line">    urls &#x3D; result[1]</span><br><span class="line">    print(titles)</span><br><span class="line">    print(urls)</span><br><span class="line">    for index, url in enumerate(urls):</span><br><span class="line">        parse_url_to_html(url, str(index) + &quot;.html&quot;)</span><br><span class="line">    htmls &#x3D; []</span><br><span class="line">    pdfs &#x3D; []</span><br><span class="line">    for i in range(0, len(urls)):</span><br><span class="line">        htmls.append(str(i) + &#39;.html&#39;)</span><br><span class="line">        pdfs.append(file_name + str(i) + &#39;.pdf&#39;)</span><br><span class="line">        save_pdf(str(i) + &#39;.html&#39;, file_name + str(i) + &#39;.pdf&#39;)</span><br><span class="line">        print(u&quot;转换完成第&quot; + str(i) + &#39;个html&#39;)</span><br><span class="line">    i &#x3D; 0</span><br><span class="line">    for pdf in pdfs:</span><br><span class="line">        fd &#x3D; open(pdf, &#39;rb&#39;)</span><br><span class="line">        append_pdf(PdfFileReader(fd), output, titles[i])</span><br><span class="line">        i &#x3D; i + 1</span><br><span class="line">        print(u&quot;合并完成第&quot; + str(i) + &#39;个pdf&#39; + pdf)</span><br><span class="line">    output.write(open(output_name, &quot;wb&quot;))</span><br><span class="line">    print(u&quot;输出PDF成功！&quot;)</span><br><span class="line">    for html in htmls:</span><br><span class="line">        os.remove(html)</span><br><span class="line">        print(u&quot;删除临时文件&quot; + html)</span><br><span class="line">    for pdf in pdfs:</span><br><span class="line">        os.remove(pdf)</span><br><span class="line">        print(u&quot;删除临时文件&quot; + pdf)</span><br><span class="line">    total_time &#x3D; time.time() - start</span><br><span class="line">    print(u&quot;总共耗时：%f 秒&quot; % total_time)</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    try:</span><br><span class="line">        main()</span><br><span class="line">    except OSError as err:</span><br><span class="line">        print(&quot;OS error: &#123;0&#125;&quot;.format(err))</span><br><span class="line">    except ValueError:</span><br><span class="line">        print(&quot;Could not convert data to an integer.&quot;)</span><br><span class="line">    finally:</span><br><span class="line">        print(&quot;Unexpected error:&quot;, sys.exc_info()[0])</span><br></pre></td></tr></table></figure>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>&emsp;&emsp;在删除中间生成的pdf时，报了一个错误(<code>OS error: [WinError 32]另一个程序正在使用此文件，进程无法访问。:&#39;temp_0.pdf&#39;</code>)，提示文件正在使用中，删除pdf文件失败。由于正在学习python，在多次尝试解决该问题，都以失败告终，等技能提升之后再进行修复~<br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> BeautifulSoup </tag>
            
            <tag> Pdfkit </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3入门学习—02条件循环语句]]></title>
      <url>/posts/1533523788/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python：</strong></p>
<p>写程序少不了的就是条件、循环语句，在程序运行中担任了重要作用。这些语句在Python中去除了大括号的包裹，完全按照缩进来控制语句的逻辑运行，如果从侧面来看，这样的代码看着清爽不少~</p>
<a id="more"></a>
<h2 id="If条件语句"><a href="#If条件语句" class="headerlink" title="If条件语句"></a>If条件语句</h2><p><a href="https://www.python.org/" target="_blank" rel="noopener">Python</a>程序语言指定任何非0和非空（null）值为true，0 或者 null为false。如果接口定义好返回值后，在判断时可以直接使用如下形式（用flag作为判断条件）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if flag:</span><br><span class="line">    execute statement</span><br></pre></td></tr></table></figure><br>同样的，python的基本条件语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if flag:</span><br><span class="line">    execute statement</span><br><span class="line">else:</span><br><span class="line">    execute statement</span><br></pre></td></tr></table></figure><br>多重判断情况下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if flag0:</span><br><span class="line">    execute statement0</span><br><span class="line">else if flag1:</span><br><span class="line">    execute statement1</span><br><span class="line">else if flag2:</span><br><span class="line">    execute statement2</span><br><span class="line">else:</span><br><span class="line">    execute statement3</span><br></pre></td></tr></table></figure><br>多重判断的代码看着是不是也很清爽，还有更清爽的<br>在同一行写if语句：<code>if ( flag ) : print &quot;Holle World&quot;</code></p>
<h2 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h2><p>对于while循环语句我们之前学的是，该语句体可能一次都不进入；然后这个循环主要重复做一些相同工作的任务。其基本形式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while flag:</span><br><span class="line">    execute statement</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>引用<a href="http://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a>上的例子</p>
</blockquote>
<div style="text-align: center"><br><img src="https://brucekong-com.gitee.io/images/loop-over-python-list-animation.gif" alt="while 动画"><br></div>

<p><strong>再次强调，在python中去除了大括号的包裹，<code>:</code>变得很重要，千万不要遗漏</strong></p>
<blockquote>
<p>while 语句时还有另外两个重要的命令 continue，break 来跳过循环。其中continue 用于跳过该次循环，break 则是用于退出循环，此外”判断条件”还可以是个常值，表示循环必定成立。下面来看几个例子：</p>
</blockquote>
<p>打印出10及以内的所有偶数<br>continue和break示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1</span><br><span class="line">while i&lt;10:</span><br><span class="line">    i+&#x3D;1</span><br><span class="line">    if i%2&gt;0:</span><br><span class="line">        continue</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"># 控制台中则打出：2 4 6 8 10</span><br></pre></td></tr></table></figure><br>常值作为判断条件，语句必定执行，至于语句是否能退出，取决于execute statement是否会跳出循环<br>如果一直循环下去，那么该语句就会成为“无限循环体”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 1:</span><br><span class="line">    execute statement</span><br></pre></td></tr></table></figure><br>该条件永远为true，循环将无限执行下去；<br>对于控制台程序，若想要退出该程序可以按Ctrl+C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var &#x3D; 1</span><br><span class="line">while var &#x3D;&#x3D; 1 :  </span><br><span class="line">   name &#x3D; input(&quot;请输入你的名字 :&quot;)</span><br><span class="line">   print(&quot;你的名字是: &quot;, name)</span><br><span class="line"> </span><br><span class="line">print &quot;再见!&quot;</span><br></pre></td></tr></table></figure><br>Python使用<code>while ...else</code>语句，需要注意的是else 中的语句会在循环正常执行完（即 while 不是通过 break 跳出而中断的）的情况下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">count &#x3D; 1</span><br><span class="line">while count &lt; 6:</span><br><span class="line">   print(count, &quot;小于6&quot;)</span><br><span class="line">   count &#x3D; count + 1</span><br><span class="line">else:</span><br><span class="line">   print(count, &quot;大于6&quot;)</span><br><span class="line">   </span><br><span class="line">控制台中会输出（6之后不再循环了）：</span><br><span class="line">1小于6</span><br><span class="line">2小于6</span><br><span class="line">3小于6</span><br><span class="line">4小于6</span><br><span class="line">5小于6</span><br><span class="line">6大于6</span><br></pre></td></tr></table></figure><br>最后就是简单while语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while flag: execute statement</span><br></pre></td></tr></table></figure></p>
<h2 id="For循环语句"><a href="#For循环语句" class="headerlink" title="For循环语句"></a>For循环语句</h2><p>从上面的while语句就可以看出，一般循环体内部都会有一个if判断语句，用来控制更加具体的逻辑操作。同样的，for循环语句内部一般也会嵌套if语句，用来控制更加复杂的流程。<br>Python中用的最多的就是<code>for in</code>，可以表示为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">group &#x3D; [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</span><br><span class="line">for sub in group:</span><br><span class="line">    print(sub)</span><br><span class="line"></span><br><span class="line">控制台中会输出:</span><br><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><br>其实在Python的for循环中，字符串可以当做数组进行循环，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for sub in &quot;Python&quot;:</span><br><span class="line">    print(sub)</span><br><span class="line"></span><br><span class="line">控制台中会输出:</span><br><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><br>另外for循环还可以通过索引值进行遍历数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">group &#x3D; [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]</span><br><span class="line">for index in range(len(group)):</span><br><span class="line">    print(group[index])</span><br><span class="line"></span><br><span class="line">控制台中同样会输出:</span><br><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><br>和<code>while … else</code>一样，<code>for … else</code> 语句中的else 语句也是在循环正常执行完的情况下执行，这里不再赘述。</p>
<p>同样的，Python中也存在着嵌套循环的情况，即一个循环体中嵌套另一个循环。for、while、if可以互相嵌套，用来完成相关逻辑操作。</p>
<p>这里再强调几个用的比较多的关键词：<code>break、continue、pass</code><br>break和continue在前面已经提到过，这里再多说一句，break、continue语句用在while和for循环中，其中break语句将停止执行最深层的循环，并开始执行下一行代码；continue语句是跳过当前循环的剩余语句，然后继续进行下一轮循环。<br>pass语句是一个空语句，是为了保持程序结构的完整性，一般是做占位语句，引用菜鸟教程的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for sub in &quot;Python&quot;:</span><br><span class="line">   if sub &#x3D;&#x3D; &quot;y&quot;:</span><br><span class="line">      pass</span><br><span class="line">      print(&quot;占位符&quot;)</span><br><span class="line">   print(letter)</span><br><span class="line"></span><br><span class="line">控制台中会输出:</span><br><span class="line">P</span><br><span class="line">占位符</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3入门学习—01环境搭建]]></title>
      <url>/posts/58933767/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python：</strong></p>
<p>Python3作为一个比较容易入门的语言，实现相同的功能，Python可以使用较少的代码来实现，正所谓人生苦短，我用Python。</p>
<a id="more"></a>
<h2 id="Python简介？"><a href="#Python简介？" class="headerlink" title="Python简介？"></a>Python简介？</h2><p>&emsp;&emsp;<a href="https://www.python.org/" target="_blank" rel="noopener">Python</a>是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python由Guido van Rossum于1989年底发明，第一个公开发行版发行于1991年。像Perl语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。<br>&emsp;&emsp;现在python存在的版本包括：<code>Python2.*</code>、<code>Python3.*</code>。本系列主要讨论Python3版本的学习历程。</p>
<h2 id="为什么要学习Python？"><a href="#为什么要学习Python？" class="headerlink" title="为什么要学习Python？"></a>为什么要学习Python？</h2><p>&emsp;&emsp;之前学习了一点Java，但是好奇心比较重，就学习了一下Python，改善一下自己的思维习惯，锻炼自己学习新语言的能力，而且如果只会Java的话，在一些方面还是有些不方便的地方：</p>
<blockquote>
<ul>
<li>系统部署</li>
<li>网页开发</li>
<li>发布简单</li>
</ul>
</blockquote>
<p>&emsp;</p>
<blockquote>
<p>另外引用知乎上一句话：写起来简单，看起来明白！<br>应用领域比较广泛:Web服务器、运维测试、科学计算、组件编程、数据库编程、游戏、图像、<strong>人工智能</strong>、<strong>机器人</strong>等等。</p>
</blockquote>
<p>&emsp;&emsp;Python既然这么优秀为啥不去学习呢，是吧？</p>
<h2 id="Python3环境搭建？"><a href="#Python3环境搭建？" class="headerlink" title="Python3环境搭建？"></a>Python3环境搭建？</h2><p>&emsp;&emsp;Python兼容Mac、Linux、Windows系统，现以Windows系统（穷）搭（逼）建为例：</p>
<ul>
<li>首先去Python官网<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">下载</a>与Windows系统版本相匹配的Python3安装包(比如：64位的系统下载<code>Windows x86-64 executable installer</code>)。</li>
<li>双击下载的exe文件，在弹出的安装界面中（记下安装路径，后面可能要用到），注意勾选<code>Add Python 3.* to PATH</code>，选择Customize installation，在弹出的安装组件列表中着重观察是否选中了<code>pip</code>，如果没有，请勾选。一路Next，直到Finish。</li>
<li>打开cmd，输入python，验证Python是否安装配置成功。</li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/valid-python.png" alt="valid python"></div>

<p><strong>注意:如果验证不成功，可将前面记录的安装路径和Scripts目录一同放入系统的环境变量中。</strong></p>
<h2 id="Python3的Hello-World怎么写？"><a href="#Python3的Hello-World怎么写？" class="headerlink" title="Python3的Hello World怎么写？"></a>Python3的Hello World怎么写？</h2><p>Let’s do it…</p>
<p><code>print(&#39;Hello&#39;, &#39;World!&#39;)</code></p>
<p>Done…</p>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/python-hello-world.png" alt="Hello World"></div><br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a><br><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node安装与配置]]></title>
      <url>/posts/3412983070/</url>
      <content type="html"><![CDATA[<p><strong>很火的一种技术：</strong></p>
<p>Node.js是之前无意间看到的一个框架、平台，今年1月份发布了1.0版本，并且很快就达到了2.0版本，<a href="https://nodejs.org" target="_blank" rel="noopener">官网</a>不断迭代版本，<a href="https://cnodejs.org/" target="_blank" rel="noopener">社区</a>也很活跃，做后端的朋友可以多关注一下。</p>
<a id="more"></a>
<h2 id="Node-js概念"><a href="#Node-js概念" class="headerlink" title="Node.js概念"></a>Node.js概念</h2><blockquote>
<p>Node.js是一个Javascript运行环境(runtime)，发布于2009年5月，由RyanDahl开发，实质是对ChromeV8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。<br>V8引擎执行Javascript的速度非常快，性能非常好。Node.js是一个基于Chrome JavaScript运行时建立的平台，用于方便地搭建响应速度快、易于扩展的网络应用。Node.js使用事件驱动，非阻塞I/O模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>
<div style="text-align: right;"><a href="https://baike.baidu.com/item/node.js/7567977?fr=aladdin&amp;fromid=11244313&amp;fromtitle=nodejs" target="_blank" rel="noopener">直接引用百度百科</a></div>
</blockquote>
<h2 id="Node-js的优势"><a href="#Node-js的优势" class="headerlink" title="Node.js的优势"></a>Node.js的优势</h2><ul>
<li>RESTful API；</li>
<li>单线程；</li>
<li>非阻塞IO；</li>
<li>V8虚拟机；</li>
<li>事件驱动。</li>
</ul>
<p>说这么多，说的什么鬼，我也不懂啊</p>
<h2 id="Node-js安装与配置"><a href="#Node-js安装与配置" class="headerlink" title="Node.js安装与配置"></a>Node.js安装与配置</h2><p>这里以Windows演示一下Node.js的安装与配置：</p>
<ul>
<li>下载Node.js安装包(建议下载LTS版本)，进入<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a>，下载对应平台版本的安装包；</li>
<li>安装Node.js；<br>注意在安装时，记得把Add To Path，不然就要手动将Node.js安装目录和npm的目录添加到环境变量中了；<br>打开Git Bash输入<code>node -v</code>测试node是否安装成功；<br>再输入<code>npm -v</code>，测试是否npm是否安装成功；</li>
<li>替换npm的源<br>打开Git Bash，输入<code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code><br>再输入<code>cnpm</code>，测试cnpm是否安装成功。</li>
</ul>
<h2 id="Node-js最常用命令"><a href="#Node-js最常用命令" class="headerlink" title="Node.js最常用命令"></a>Node.js最常用命令</h2><p>由于cnpm是npm的镜像，所以两者的命令及参数是一模一样的，这里只说一下npm的命令操作…</p>
<ul>
<li>node -v</li>
<li>node -h</li>
<li>npm i (i为install的简写) 安装模块到本目录</li>
<li>npm i -g (i为install的简写) 全局安装模块</li>
<li>npm un (un为uninstall的简写) 卸载本目录模块</li>
<li>npm un -g (un为uninstall的简写) 卸载本目录模块</li>
<li>npm list 列出安装的模块</li>
<li>npm update 更新当前目录下的所有模块</li>
</ul>
<p>Node.js升级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br><span class="line">n stable</span><br></pre></td></tr></table></figure></p>
<p>npm升级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 中级用户的25个提示]]></title>
      <url>/posts/2220897336/</url>
      <content type="html"><![CDATA[<p><strong>超级好用的版本管理系统：</strong></p>
<p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<a id="more"></a>
<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/git-log.jpg" alt="git log"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理Linux 内核开发而开发的一个开放源码的版本控制软件。</p>

<h2 id="安装及基本知识"><a href="#安装及基本知识" class="headerlink" title="安装及基本知识"></a>安装及基本知识</h2><h3 id="安装后第一步"><a href="#安装后第一步" class="headerlink" title="安装后第一步"></a>安装后第一步</h3><p>安装 Git 之后，你要做的第一件事情就是去配置你的名字和邮箱，因为每一次提交都需要这些信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Some One&quot;</span><br><span class="line">$ git config --global user.email &quot;someone@gmail.com&quot;</span><br></pre></td></tr></table></figure>
<h3 id="Git是以指针为基础"><a href="#Git是以指针为基础" class="headerlink" title="Git是以指针为基础"></a>Git是以指针为基础</h3><p>存储在 git 中的所有东西都包含在一个文件中。当你提交的时候，git 会创建一个包含提交消息和相关数据的文件（名称、邮件、日期/时间、上一次提交等等），并将其链接到一个树形文件。树形文件包含一个对象列表或者其它树。对象或二进制大数据对象(<a href="http://en.wikipedia.org/wiki/Binary_large_object" target="_blank" rel="noopener">BLOB</a>)是提交的真正内容（一个文件，如果你愿意，虽然文件名没有存储在对象中，但会存储在树中）。所有这些文件都以对象的 SHA-1 哈希为文件名进行存储。</p>
<p>分支和标签只是一些文件，这些文件包含（基本上）一个指向提交的 SHA-1 哈希值。使用这些引用在灵活性和速度上均有大幅提升，创建一个新的分支就和创建一个文件一样简单，只是这个文件带有分支名称和一个包含指向提交（你从这个提交建立分支）的SHA-1哈希值。当然，当你使用 Git 命令行工具（或一个图形用户界面）时，你永远也不会这么做，但它就是这么简单。</p>
<p>你可能已经听说过对 HEAD 的引用。它只是一个包含 SHA-1引用的文件，这个引用指向你当前的提交。如果你正在解决一个合并冲突问题，查看一下HEAD，你会发现，它与一个特定的分支或分支上的特定点无关，只和你现在的位置有关。</p>
<p>所有的分支指针保存在 .git/refs/heads 目录下，HEAD 在 .git/HEAD 目录下，标签在 .git/refs/tags 目录下 - 你可以随意看看。</p>
<h3 id="两个Parents-当然！"><a href="#两个Parents-当然！" class="headerlink" title="两个Parents - 当然！"></a>两个Parents - 当然！</h3><p>当在日志文件中查看一个合并提交的消息时，你会看到两个 parents（与正常提交相比）。第一个parent 是你所在的分支，第二个 parents 是你并入的分支。</p>
<h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>到目前为止，我确信你一定有一个合并冲突需要解决。通常情况下，通过编辑该文件，删除文件中的&lt;&lt;&lt;&lt;, ====, &gt;&gt;&gt;&gt;标记，然后保存你需要保留的代码就可以了。有时候，在任何变更之前查看代码都是一个值得推荐的做法，比如，在你对两个有冲突的分支采取行动之前。这是又一个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --merge</span><br><span class="line">diff --cc dummy.rb  </span><br><span class="line">index 5175dde,0c65895..4a00477  </span><br><span class="line">--- a&#x2F;dummy.rb</span><br><span class="line">+++ b&#x2F;dummy.rb</span><br><span class="line">@@@ -1,5 -1,5 +1,5 @@@</span><br><span class="line">  class MyFoo</span><br><span class="line">    def say</span><br><span class="line">-     puts &quot;Bonjour&quot;</span><br><span class="line"> -    puts &quot;Hello world&quot;</span><br><span class="line">++    puts &quot;Annyong Haseyo&quot;</span><br><span class="line">    end</span><br><span class="line">  end</span><br></pre></td></tr></table></figure>
<p>如果文件是二进制的，文件比较就不是那么容易了…你通常要做的是尝试每个版本的二进制文件，并决定使用哪一个（或者在二进制文件编辑器手动复制部分内容）。从一个特定分支下 pull 一个文件副本（如果你要合并主分支和分支132的话）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master flash&#x2F;foo.fla # or...</span><br><span class="line">$ git checkout feature132 flash&#x2F;foo.fla</span><br><span class="line">$ # Then...</span><br><span class="line">$ git add flash&#x2F;foo.fla</span><br></pre></td></tr></table></figure>
<p>另一种方法是从 git 中查看这个文件 - 你能够以其他文件名的方式进行查看，然后将正确的文件（当你确定它是哪一个时）复制到正常的文件名中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git show master:flash&#x2F;foo.fla &gt; master-foo.fla</span><br><span class="line">$ git show feature132:flash&#x2F;foo.fla &gt; feature132-foo.fla</span><br><span class="line">$ # Check out master-foo.fla and feature132-foo.fla</span><br><span class="line">$ # Let&#39;s say we decide that feature132&#39;s is correct</span><br><span class="line">$ rm flash&#x2F;foo.fla</span><br><span class="line">$ mv feature132-foo.fla flash&#x2F;foo.fla</span><br><span class="line">$ rm master-foo.fla</span><br><span class="line">$ git add flash&#x2F;foo.fla</span><br></pre></td></tr></table></figure>
<p>更新：感谢 Carl 在早先的的博客评论中给与的提醒，你实际上能使用 “git checkout —ours flash/foo.fla” 和 “git checkout —theirs flash/foo.fla” 检出一个特定的版本而不需要记住你要合并到哪一个分支。我个人更喜欢更明确些，但是你可以随便选择…</p>
<p>在解决了合并冲突问题之后（就像我上面所做的那样），请记得将这个文件添加给索引。</p>
<h2 id="服务器、分支和标签"><a href="#服务器、分支和标签" class="headerlink" title="服务器、分支和标签"></a>服务器、分支和标签</h2><h3 id="远程服务器"><a href="#远程服务器" class="headerlink" title="远程服务器"></a>远程服务器</h3><p>Git 最强大的功能之一是可以有一个以上的远程服务器（另一个事实，你总是可以运行一个本地仓库）。你不一定总是需要写访问权限，你可以从多个服务器中读取（用于合并），然后写到另一个服务器中。添加一个远程服务器很简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add john git@github.com:johnsomeone&#x2F;someproject.git</span><br></pre></td></tr></table></figure>
<p>如果你想查看远程服务器的相关信息，你可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># shows URLs of each remote server</span><br><span class="line">$ git remote -v </span><br><span class="line"></span><br><span class="line"># gives more details about each</span><br><span class="line">$ git remote show name</span><br></pre></td></tr></table></figure>
<p>你可以查看本地分支和远程分支之间的差别：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff master..john&#x2F;master</span><br></pre></td></tr></table></figure>
<p>你也能查看不在远程分支上的 HEAD 的变化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log remote&#x2F;branch..</span><br><span class="line"># Note: no final refspec after ..</span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在 Git 中存在两种类型的标签 - 一个轻量级标签和一个注解标签。记着第二个提示中说过 Git 是基于指针的，二者的区别很简单。一个轻量级标签无非是一个指向提交的具名指针。你可以改变它并指向另一个提交。一个注解标签是一个指向标签对象的具名指针，这个标签对象拥有自己的消息和历史。如果有需要，标签对象的消息可以采用 GPG 加密签名。</p>
<p>创建两种类型的标签其实很容易（只是一个命令行选项的差异）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag to-be-tested</span><br><span class="line">$ git tag -a v1.1.0 # Prompts for a tag message</span><br></pre></td></tr></table></figure>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>在 Git 中创建分支非常容易（闪电般的速度，因为它仅仅需要创建一个不到100字节的文件）。创建一个新分支并切换过去的通用写法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch feature132</span><br><span class="line">$ git checkout feature132</span><br></pre></td></tr></table></figure>
<p>当然，如果你知道你要马上切换过去，你可以使用一条命令就能做到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature132</span><br></pre></td></tr></table></figure>
<p>如果你要重命名一个本地分支，同样是件容易的事（长命令方式用来显示具体执行过程）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b twitter-experiment feature132</span><br><span class="line">$ git branch -d feature132</span><br></pre></td></tr></table></figure>
<p>更新：或者你（就像 Brian Palmer 在博客文章评论中指出的那样）只使用 “git branch” 和 -m 选项就可以一步到位：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -m twitter-experiment</span><br><span class="line">$ git branch -m feature132 twitter-experiment</span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>在将来某个时候，你想要合并你的变更。有两种方式可以实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge feature83 # Or...</span><br><span class="line">$ git rebase feature83</span><br></pre></td></tr></table></figure>
<p>merge 和 rebase 的区别在于，merge 试图解决变更而且创建一个融合后的新提交，而 rebase 则试图把自你上次在其他分支上的变化，在另一个分支的 HAED 上重现。但是，在你向远程服务器推送一个分支之后，不要进行 rebase 操作 - 这会引发混淆/问题。</p>
<p>如果你不能确定哪些分支仍然有独立的工作在进行 - 以便你能知道你需要合并哪一个分支以及删除哪些分支，git branch 命令有两个选项可以帮助实现这一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Shows branches that are all merged in to your current branch</span><br><span class="line">$ git branch --merged</span><br><span class="line"></span><br><span class="line"># Shows branches that are not merged in to your current branch</span><br><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure>
<h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><p>如果你有一个本地分支，你想让它出现在远程服务器上，你可以使用一个推送命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin twitter-experiment:refs&#x2F;heads&#x2F;twitter-experiment</span><br><span class="line"># Where origin is our server name and twitter-experiment is the branch</span><br></pre></td></tr></table></figure>
<p>更新：感谢 Erlend 在博客文章评论中提到的 - 这实际上和 git push origin twitter-experiment 达到的效果的一样，但是通过使用全部语法，你能看到你实际上在两端使用了不同的名字（你的本地名字可能是 add-ssl-support，而远程名字可能是 issue-1723）。</p>
<p>如果你想删除一个远程服务器上的分支（请注意分支名称之前的冒号）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :twitter-experiment</span><br></pre></td></tr></table></figure>
<p>如果你想显示所有远程分支的状态，你能像这样查看它们：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br></pre></td></tr></table></figure>
<p>这可能会列出一些服务器上曾经有过但现在已不存在的分支。如果碰到这种情况，你可以很轻松地使用如下命令从本地检出并将其删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote prune</span><br></pre></td></tr></table></figure>
<p>最后，如果你有一个远程分支，你想在本地进行跟踪它，通常的做法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track myfeature origin&#x2F;myfeature</span><br><span class="line">$ git checkout myfeature</span><br></pre></td></tr></table></figure>
<p>然而，如果你使用 -b 标识符去检出的话，新版的 Git 会自动建立跟踪：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b myfeature origin&#x2F;myfeature</span><br></pre></td></tr></table></figure>
<p><code>在临时存放区、索引和文件系统中保存内容</code></p>
<h3 id="临时存放（Stashing）"><a href="#临时存放（Stashing）" class="headerlink" title="临时存放（Stashing）"></a>临时存放（Stashing）</h3><p>在Git中，你可以把当前的工作状态储存在一个临时的存储区域堆栈，然后重新加以利用。简单的案例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash # Do something...</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<p>很多人推荐使用 git stash apply 来代替 “pop”，然而如果你真这么做的话，你最终得到一个长长的毫无用处的储藏清单。如果对它进行清理，“pop” 只会把它从堆栈中删除。如果你已经使用了 git stash apply ，你可以使用如下命令从堆栈中删除最后一项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure>
<p>Git 会基于当前的提交消息自动创建一个注释信息。如果你更喜欢使用一个自定义的消息（因为它可能和之前的提交无关）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash save &quot;My stash message&quot;</span><br></pre></td></tr></table></figure>
<p>如果你想从你的列表中（不必是最后一个）对一个特定的 stash 加以利用，你可以列出它们并像这样来使用它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">  stash@&#123;0&#125;: On master: Changed to German</span><br><span class="line">  stash@&#123;1&#125;: On master: Language is now Italian</span><br><span class="line">$ git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="交互式添加"><a href="#交互式添加" class="headerlink" title="交互式添加"></a>交互式添加</h3><p>在 Subversion 的世界里，你修改文件然后只是提交有变化的文件。而在 Git 的世界里，你在提交某些文件甚至某些补丁上有更多的控制权。为了提交某些文件或者文件的某些部分，你必须进入交互模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add -i</span><br><span class="line">           staged     unstaged path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Commands ***</span><br><span class="line">  1: status      2: update   3: revert   4: add untracked</span><br><span class="line">  5: patch      6: diff     7: quit     8: help</span><br><span class="line">What now&gt;</span><br></pre></td></tr></table></figure>
<p>这会让你进入一个基于交互式命令的菜单模式。你可以使用命令的数字符号或者加亮字符（如果你开启颜色高亮显示功能的话）进入对应模式，然后就是正常输入文件数的问题了（你可以使用像1或1-4或2,4,7这样的格式）。</p>
<p>如果你想进入修补模式（交互模式下输入‘p’或‘5’ ），你也可以直接进入那个模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git add -p    </span><br><span class="line">diff --git a&#x2F;dummy.rb b&#x2F;dummy.rb  </span><br><span class="line">index 4a00477..f856fb0 100644  </span><br><span class="line">--- a&#x2F;dummy.rb</span><br><span class="line">+++ b&#x2F;dummy.rb</span><br><span class="line">@@ -1,5 +1,5 @@</span><br><span class="line"> class MyFoo</span><br><span class="line">   def say</span><br><span class="line">-    puts &quot;Annyong Haseyo&quot;</span><br><span class="line">+    puts &quot;Guten Tag&quot;</span><br><span class="line">   end</span><br><span class="line"> end</span><br><span class="line">Stage this hunk [y,n,q,a,d,&#x2F;,e,?]?</span><br></pre></td></tr></table></figure>
<p>如你所见，在底部你得到一系列选项为选择去添加文件改变的部分，这个文件的所有变化等等。使用‘?’ 命令可以了解选不同选项的解释。</p>
<h3 id="存储-从文件系统检索"><a href="#存储-从文件系统检索" class="headerlink" title="存储/从文件系统检索"></a>存储/从文件系统检索</h3><p>一些项目（例如 Git 项目自身）直接在 Git 文件系统中存储额外的文件而不必是检入文件。</p>
<p>让我们开始在 Git 中存储一个任意文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;Foo&quot; | git hash-object -w --stdin</span><br><span class="line">51fc03a9bb365fae74fd2bf66517b30bf48020cb</span><br></pre></td></tr></table></figure>
<p>此时，该文件对象已在数据库中，但是如果你不设置（一些东西）指向那个文件对象，它将被作为垃圾而回收。最简单的方法是标记它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag myfile 51fc03a9bb365fae74fd2bf66517b30bf48020cb</span><br></pre></td></tr></table></figure>
<p>既然在这里我们已经标记了 myfile。当我们需要获取该文件时，我们可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file blob myfile</span><br></pre></td></tr></table></figure>
<p>程序员可能经常用到的工具文件（密码、GPG 密钥、等等），不需要每次都检出到磁盘上（特别是在生产环境下），这种方法非常有效。</p>
<h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>如果你不使用‘git log’查看最近提交历史的话，你就不能长时间顺利地使用Git。但是，也存在一些如何更好使用它的建议。例如，你可以查看每次提交中改变的一个补丁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p</span><br></pre></td></tr></table></figure>
<p>或者你可以只是查看一个哪些文件有所更改的概述：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br></pre></td></tr></table></figure>
<p>你可以在一行中设置一个不错的别名，用于显示简短的提交和漂亮的带有消息的分支图（像 gitk，但在命令行上）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.lol &quot;log --pretty&#x3D;oneline --abbrev-commit --graph --decorate&quot;</span><br><span class="line">$ git lol</span><br><span class="line">* 4d2409a (master) Oops, meant that to be in Korean</span><br><span class="line">* 169b845 Hello world</span><br></pre></td></tr></table></figure>
<h3 id="检索日志"><a href="#检索日志" class="headerlink" title="检索日志"></a>检索日志</h3><p>如果你想在日志中查询一个特定作者，你可以这样指定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author&#x3D;Andy</span><br></pre></td></tr></table></figure>
<p>更新：感谢 Johannes 的评论，我终于化解了一部分困惑。<br>或者如果你有一个搜索词出现在提交消息中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --grep&#x3D;&quot;Something in the message&quot;</span><br></pre></td></tr></table></figure>
<p>还有一个功能更强大的叫 pickaxe 的命令，它可以查找条目用来添加或删除一个特定的内容（也就是，当它第一次出现或被删除的时候）。这样你就可以知道何时增加了一行（但是如果那一行中的字符随后被改变，你将无从得知）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -S &quot;TODO: Check for admin status&quot;</span><br></pre></td></tr></table></figure>
<p>如果你改变一个特定的文件会怎么样呢，例如 lib/foo.rb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log lib&#x2F;foo.rb</span><br></pre></td></tr></table></figure>
<p>比如说你有一个 feature/132 分支和一个 feature/145 分支，你想查看在这些分支但却不在主分支上的提交（备注：^ 代表非）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log feature&#x2F;132 feature&#x2F;145 ^master</span><br></pre></td></tr></table></figure>
<p>你也可以使用 ActiveSupport 风格的日期缩小日期范围：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --since&#x3D;2.months.ago --until&#x3D;1.day.ago</span><br></pre></td></tr></table></figure>
<p>它默认使用 OR 模式来组合查询，但是你也可以很轻松地改为 AND 模式（如果你的查询项不止一个的话）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --since&#x3D;2.months.ago --until&#x3D;1.day.ago --author&#x3D;andy -S &quot;something&quot; --all-match</span><br></pre></td></tr></table></figure>
<h3 id="选择查看-修改的版本"><a href="#选择查看-修改的版本" class="headerlink" title="选择查看/修改的版本"></a>选择查看/修改的版本</h3><p>当引用一个修订版本时，你有许多选项可以选择，当然，这取决于你对此功能的了解程度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git show 12a86bc38 # By revision</span><br><span class="line">$ git show v1.0.1 # By tag</span><br><span class="line">$ git show feature132 # By branch name</span><br><span class="line">$ git show 12a86bc38^ # Parent of a commit</span><br><span class="line">$ git show 12a86bc38~2 # Grandparent of a commit</span><br><span class="line">$ git show feature132@&#123;yesterday&#125; # Time relative</span><br><span class="line">$ git show feature132@&#123;2.hours.ago&#125; # Time relative</span><br></pre></td></tr></table></figure>
<p>请注意，和上一节有所不同，在行尾的脱字符表示提交的 parent - 行首的脱字符则表示不在这个分支上。</p>
<h3 id="选择一个范围"><a href="#选择一个范围" class="headerlink" title="选择一个范围"></a>选择一个范围</h3><p>最简单的方法是这样来用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log origin&#x2F;master..new</span><br><span class="line"># [old]..[new] - everything you haven&#39;t pushed yet</span><br></pre></td></tr></table></figure>
<p>你也可以删除 [new]，这将使用当前的 HEAD。</p>
<p><code>时间回退和错误修复</code></p>
<h3 id="重置更改"><a href="#重置更改" class="headerlink" title="重置更改"></a>重置更改</h3><p>如果你还没有提交一个更改，你可以很容易地重置它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD lib&#x2F;foo.rb</span><br></pre></td></tr></table></figure>
<p>通常使用‘unstage’作为别名比较好，因为它不是那么显而易见。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.unstage &quot;reset HEAD&quot;</span><br><span class="line">$ git unstage lib&#x2F;foo.rb</span><br></pre></td></tr></table></figure>
<p>如果你已经提交了文件，你可以做两件事情 - 如果是最后一次提交，你可以这样来修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>
<p>这将回滚到最后一次提交，让你的工作副本回到变化存储在暂存区的状态，你可以编辑提交消息准备下一次提交。<br>如果你的提交不止一次，并且只想完全回滚它们，你可以重置分支回到之前的时间点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout feature132</span><br><span class="line">$ git reset --hard HEAD~2</span><br></pre></td></tr></table></figure>
<p>如果你真的想把分支指向一个完全不同的 SHA-1（也许你把一个分支的 HEAD 指向另一个分支，或者进一步提交），你可以按照以下方式去做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout FOO</span><br><span class="line">$ git reset --hard SHA</span><br></pre></td></tr></table></figure>
<p>实际上还有一种更便捷的方式（因为它不会先将你的工作副本变回最初 FOO 状态，然后再指向 SHA）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-ref refs&#x2F;heads&#x2F;FOO SHA</span><br></pre></td></tr></table></figure>
<h3 id="提交到错误的分支"><a href="#提交到错误的分支" class="headerlink" title="提交到错误的分支"></a>提交到错误的分支</h3><p>好吧，让我们假设你提交到主分支，但应该已经创建了一个叫做 experimental 的主题分支。为了移除这些变化，你可以在当前点创建一个分支，回退 HEAD，然后检出新的分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch experimental   # Creates a pointer to the current master state</span><br><span class="line">$ git reset --hard master~3 # Moves the master branch pointer back to 3 revisions ago</span><br><span class="line">$ git checkout experimental</span><br></pre></td></tr></table></figure>
<p>如果你已经在一个分支的一个分支的一个分支等上面做了些变更，这将会更复杂。然后你需要做的就是在这个分支上将其变更 rebase 到另一个的地方：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch newtopic STARTPOINT</span><br><span class="line">$ git rebase oldtopic --onto newtopic</span><br></pre></td></tr></table></figure>
<h3 id="交互式-rebasing"><a href="#交互式-rebasing" class="headerlink" title="交互式 rebasing"></a>交互式 rebasing</h3><p>这是一个很酷的特性，我之前已看过演示，但当时没有真正搞明白，现在来看其实很简单。比方说，你已做了3次提交，但是你想对它们进行重新排序或者编辑（或者合并它们）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i master~3</span><br></pre></td></tr></table></figure>
<p>然后你将编辑器打开。你所要做的就是修改 “pick/squash/edit 的指令来进行如何提交，然后保存/退出。在编辑之后，你可以使用<code>git rebase —continue</code>让你的每一个指令一个一个进行。</p>
<p>如果你选择编辑一个文件，这会让你停留在你提交时的状态，因此你需要使用<code>git commit —amend</code>对它进行编辑。</p>
<p>备注：在 REBASE 过程中不要进行提交工作 - 只能添加然后使用 —continue, —skip or —abort 选项。</p>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>如果你已经提交了一些内容到你的分支中（也许你是从SVN中的旧代码库导入的），你想从历史中删除掉所有的已提交内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --tree-filter &#39;rm -f *.class&#39; HEAD</span><br></pre></td></tr></table></figure>
<p>如果你已经向远程服务器推送过代码，但自那之后提交的都是一些垃圾，在推送之前你可以在本地系统上执行这样的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git filter-branch --tree-filter &#39;rm -f *.class&#39; origin&#x2F;master..HEAD</span><br></pre></td></tr></table></figure>
<p><code>各种各样的提示</code></p>
<h3 id="之前你看过的引用"><a href="#之前你看过的引用" class="headerlink" title="之前你看过的引用"></a>之前你看过的引用</h3><p>如果你知道你之前已经查看过一个 SHA-1，但是你已经做了一些重置/回退工作，你可以使用 reflog 命令去查看你最近看过的 SHA-1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">$ git log -g # Same as above, but shows in &#39;log&#39; format</span><br></pre></td></tr></table></figure>
<h3 id="分支命名"><a href="#分支命名" class="headerlink" title="分支命名"></a>分支命名</h3><p>一个可爱的小提示 - 请记住，分支的名字并不局限于 a-z 和 0-9 这些字符。名字中可以使用 / 和 . 来伪装命名空间或者版本号，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ # Generate a changelog of Release 132</span><br><span class="line">$ git shortlog release&#x2F;132 ^release&#x2F;131</span><br><span class="line">$ # Tag this as v1.0.1</span><br><span class="line">$ git tag v1.0.1 release&#x2F;132</span><br></pre></td></tr></table></figure>
<h3 id="寻找谁是始作俑者"><a href="#寻找谁是始作俑者" class="headerlink" title="寻找谁是始作俑者"></a>寻找谁是始作俑者</h3><p>寻找谁更改了一个文件中的一行代码经常会用到。简单命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame FILE</span><br></pre></td></tr></table></figure>
<p>有时更改来自于前一个文件（如果你已经合并了两个文件，或者你已经移动了一个函数），因此你可以这样用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ # shows which file names the content came from</span><br><span class="line">$ git blame -C FILE</span><br></pre></td></tr></table></figure>
<p>有时通过向前或向后点击来进行变化跟踪，这是很好的方法。有一个内置的 GUI 程序专门为此设计：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git gui blame FILE</span><br></pre></td></tr></table></figure>
<h3 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h3><p>Git 通常不需要大量维护，它基本上可以自我维护。然而，你可以使用如下命令查看数据库统计信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git count-objects -v</span><br></pre></td></tr></table></figure>
<p>如果数值很高，你可以选择使用垃圾回收你的重复内容。这不会影响推送或者其它用户，但却可以让你的命令运行更快且占用更少空间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git gc</span><br></pre></td></tr></table></figure>
<p>经常运行一致性检查也是值得推荐的做法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fsck --full</span><br></pre></td></tr></table></figure>
<p>你也可以在行尾添加一个 —auto 参数（如果你频繁运行它，或者在你的服务器上每日从 crontab 中运行它），如果统计数据表明必须进行要进行一致性检查，只要 fsck 命令就行。</p>
<p>如果检查 “dangling” 或 “unreachable” 的结果一切正常，这经常是由于回退 HEAD 或 rebasing的结果。如果检查“missing” 或 “sha1 mismatch” 出了问题…寻求专业帮助吧！</p>
<h3 id="恢复一个丢失的分支"><a href="#恢复一个丢失的分支" class="headerlink" title="恢复一个丢失的分支"></a>恢复一个丢失的分支</h3><p>如果你使用 -D 选项删除了一个分支 experimental，你可以重新创建它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch experimental SHA1_OF_HASH</span><br></pre></td></tr></table></figure>
<p>你可以使用<code>git reflog</code>来发现一个 SHA-1 哈希值，如果你近期访问过它的话。</p>
<p>另一种方法是使用<code>git fsck —lost-found</code>。一个悬空的提交就是一个<code>lost HEAD</code>（它只会是一个已删除分支的 HEAD，因为当一个 HEAD^ 被 HEAD 引用时，它就没有悬空）</p>
<p>原文链接 : <a href="https://www.andyjeffries.co.uk/25-tips-for-intermediate-git-users/" target="_blank" rel="noopener">25 Tips for Intermediate Git Users</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[控制台，终端，tty，shell等概念的区别]]></title>
      <url>/posts/1500121752/</url>
      <content type="html"><![CDATA[<p><strong>带你走进终端世界：</strong></p>
<p>控制台程序是为了兼容DOS程序而设立的，这种程序的执行就好像在一个DOS窗口中执行一样，没有自己的界面。</p>
<a id="more"></a>
<p>使用linux已经有一段时间，却一直弄不明白这几个概念之间的区别。虽然一直在用，但是很多概念都感觉模糊不清，这样不上不下的状态实在令人不爽。下面就澄清一下这些概念。</p>
<p>这些概念本身有着非常浓厚的历史气息，随着时代的发展，他们的含义也在发生改变，它们有些已经失去了最初的含义，但是它们的名字却被保留了下来。</p>
<h2 id="控制台-Console"><a href="#控制台-Console" class="headerlink" title="控制台(Console)"></a>控制台(Console)</h2><p>控制台(Console)是物理设备，用于输入输出，它直接连接在计算机上，是计算机系统的一部分。计算机输出的信息会显示在控制台上，例如BIOS的输出，内核的输出。</p>
<h2 id="终端-Terminal"><a href="#终端-Terminal" class="headerlink" title="终端(Terminal)"></a>终端(Terminal)</h2><p>终端(Terminal)也是一台物理设备，只用于输入输出，本身没有强大的计算能力。一台计算机只有一个控制台，在计算资源紧张的时代，人们想共享一台计算机，可以通过终端连接到计算机上，将指令输入终端，终端传送给计算机，计算机完成指令后，将输出传送给终端，终端将结果显示给用户。</p>
<h2 id="虚拟控制台-Virtual-Console-，虚拟终端-Virtual-Terminal"><a href="#虚拟控制台-Virtual-Console-，虚拟终端-Virtual-Terminal" class="headerlink" title="虚拟控制台(Virtual Console)，虚拟终端(Virtual Terminal)"></a>虚拟控制台(Virtual Console)，虚拟终端(Virtual Terminal)</h2><p>虚拟控制台(Virtual Console)和虚拟终端是一样的。我们只有一台终端（物理设备），这是我们与计算机之间的用户接口。假如有一天，我们想拥有多个用户接口，那么，一方面我们可以增加终端数目（物理设备），另一方面，还可以在同一台终端（物理设备）上虚拟出多个终端，它们之间互相不影响，至少看起来互相不影响。这些终端就是虚拟终端。</p>
<p>在Ubuntu中，我们按下Ctrl+Alt+Fx时，会进入第x个虚拟终端，一共有七个虚拟终端，其中第七个虚拟终端，就是我们默认使用的图形用户界面。</p>
<h2 id="终端模拟器-Terminal-Emulator"><a href="#终端模拟器-Terminal-Emulator" class="headerlink" title="终端模拟器(Terminal Emulator)"></a>终端模拟器(Terminal Emulator)</h2><p>我们知道，终端是一种物理设备，而终端模拟器(Terminal Emulator)，是一个程序，这些程序用来模拟物理终端。图形用户界面中的终端模拟器一般称为终端窗口(Terminal Window)，我们在Ubuntu下打开的gnome-terminal就属于此类。</p>
<h2 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h2><p>tty的全称是TeleTYpewriter，这就是早期的终端（物理设备），它们用于向计算机发送数据，并将计算机的返回结果打印出来。显示器出现后，终端不再将结果打印出来，而是显示在显示器上。但是tty的名字还是保留了下来。</p>
<p>在Ubuntu中，我们按下Ctrl+Alt+F1时，会进入第1个虚拟终端，你可以看到屏幕上方显示的tty1。</p>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>shell 和之前说的几个概念截然不同，之前的几个概念都是与计算机的输入输出相关的，而shell是和内核相关的。内核为上层的应用提供了很多服务，shell在内核的上层，在应用程序的下层。例如，你写了一个 hello world 程序，你并不用显式地创建一个进程来运行你的程序，你把写好的程序交给shell就行了，由shell负责为你的程序创建进程。</p>
<p>我们在终端模拟器中输入命令时，终端模拟器本身并不解释执行这些命令，它只负责输入输出，真正解释执行这些命令的，是shell。</p>
<p>我们平时使用的sh, bash, csh是shell的不同实现。</p>
<blockquote>
<p><strong>sh:</strong><br>sh这个概念本身就有岐义，它可以指shell程序的名字，也代表了shell的实现。<br>Thompson shell是第一个Unix shell，由 Ken Thompso于1971年在Unix第一版本中引入，shell的程序名即为sh。Bourne shell作为Thompson shell的替代，由 Stephen Bourne于1977年在Unix第七版中引入，它的程序名也是sh。Bourne shell不仅仅是一个命令解释器，更作为一种编程语言，提供了Thompson shell不具备的程序控制功能，并随着 Brian W. Kernighan 和 Rob Pike 的 The UNIX Programming Environment的出版而名声大噪。</p>
<p><strong>csh: </strong><br>csh全称为 C Shell，由 Bill Joy在70年代晚期完成，那时候他还是加州伯克利大学的研究生。tcsh是csh的升级版。与sh不同，csh的shell脚本，语法接近于C_language。</p>
<p><strong>bash: </strong><br>bash是由 Brian Fox为GNU项目开发的自由软件，作为Bourne shell的替代品，于1989年发布。是Linux和Mac OS X的默认shell。bash的命令语法是Bourne shell命令语法的超集，从ksh和csh借鉴了一些思想。</p>
</blockquote>
<p>好了，就写到这里，上面的内容是我参考维基百科后写下的，<code>不保证完全正确</code>，下面还提供了一些资料，如果有兴趣可以阅读一下。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><blockquote>
<ul>
<li><a href="http://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con" target="_blank" rel="noopener">What is the exact difference between a ‘terminal’, a ‘shell’, a ‘tty’ and a ‘console’?</a></li>
<li><a href="http://www.linuxsir.org/bbs/thread362001.html?pageon=1#2059206" target="_blank" rel="noopener">shell，bash,zsh,console,terminal到底是什么意思，它们之间又是什么关系？</a></li>
<li><a href="http://blog.csdn.net/caomiao2006/article/details/8791775" target="_blank" rel="noopener">shell、控制台、终端的区别</a></li>
<li><a href="http://askubuntu.com/questions/14284/why-is-a-virtual-terminal-virtual-and-what-why-where-is-the-real-terminal" target="_blank" rel="noopener">Why is a virtual terminal “virtual”, and what/why/where is the “real” terminal?</a></li>
</ul>
</blockquote>
<p><strong>参考自:</strong><a href="http://minixalpha.github.io/%E5%B7%A5%E5%85%B7/2014/02/28/terminal-shell.html" target="_blank" rel="noopener">Minixalpha Blog</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 控制台 </tag>
            
            <tag> 终端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何编写高质量的程序]]></title>
      <url>/posts/3490671754/</url>
      <content type="html"><![CDATA[<p><strong>学习编程：</strong></p>
<p>学习任何编程语言都会有一个基本的过程，开始的时候学习基本的语法，然后学习各种库，框架，开始做各种项目。</p>
<a id="more"></a>
<h2 id="如何编写高质量的程序"><a href="#如何编写高质量的程序" class="headerlink" title="如何编写高质量的程序"></a>如何编写高质量的程序</h2><p>学习任何编程语言都会有一个基本的过程，开始的时候学习基本的语法，然后学习各种库，框架，开始做各种项目。在做项目的过程中，随着代码量的增加，我们会渐渐感到失去对程序的掌控能力，bug开始增加，牵一发而动全身，顾此失彼。这充分说明了编写高质量程序的重要性，这里的“高质量”主要指程序的正确性，可读性，可维护性。</p>
<h2 id="什么是高质量的程序"><a href="#什么是高质量的程序" class="headerlink" title="什么是高质量的程序"></a>什么是高质量的程序</h2><p><strong>正确性</strong></p>
<p>程序正确性的重要程度无需多言，尤其在一些特殊领域，例如芯片制造业，航天业，武器制造业，对程序正确性往往有着极其严格的要求，因为一旦程序出错，代价往往是巨大的。在这些领域，需要使用形式化方法(formal methods)来自动验证程序的正确性，也就是说你需要证明程序的正确性，而不仅仅保证程序在大多数情况下是正确的。在其它领域，对正确性没有这么高要求，形式化方法也不适用，但是我们还是需要使用其它手段，例如测试，code review等等来保证软件的正确性。</p>
<p><strong>可读性</strong></p>
<p>可读性可以帮助程序作者理清思路，思路清晰后，程序不容易出错。另外，其它程序员在维护你的代码时，更容易理解你的意思，方便修改bug，方便扩展。</p>
<p>不要浪费自己的时间，更不要浪费别人的时间。</p>
<p><strong>可维护性</strong></p>
<p>这里的可维护性主要指程序应对变化的能力。程序在完成基本功能后，可能会发生各种改变：用户需求变了，性能达不到要求需要重新实现算法，等等。一旦程序的一个点发生改变，其它点如果也需要同时手动改变，那么程序会变的不可控制，出bug的机会会增加。想像一下，我们的程序是一个盒子，在添加新功能时，如果只需要把新模块插到一个地方，新模块就可以被系统使用，这样的程序可维护性是很高的。但是如果添加新功能时，需要把原来的程序盒子拆开，其它模块也需要相应修改，才能加入新模块，这样的程序可维护性就很差。</p>
<h2 id="提高程序质量的重要措施"><a href="#提高程序质量的重要措施" class="headerlink" title="提高程序质量的重要措施"></a>提高程序质量的重要措施</h2><p><strong>测试</strong></p>
<p>为什么强调先编写测试用例，再实现程序？先编写测试用例的意义在于，让编写程序的人对程序本身有更好的理解。因为你首先得明白什么样的程序是正确的，然后才能写出正确的程序。测试用例其实是对程序正确性的一种描述。</p>
<p>为什么强调自动化测试，而不是手动测试？因为自动化测试可以增加测试的便捷度，而人们通常会更多地使用那些便捷度高的东西。我在做个人项目的时候就发现，在编写了自动测试的脚本后，我每改动一点程序，就会自动运行一下脚本，在此之前，我明知道测试很重要，但是还是不会测试的如此频繁。这样的好处是可以方便定位bug，否则在系统经过了大量改动之后，出了bug都不知道可能在哪里。</p>
<p>在对程序进行重构时，很重要的一点就在于，一定要先写好测试用例，然后每改动一点，就自动测试一下，保证程序始终保持在可控状态。</p>
<p><strong>良好的编程风格</strong></p>
<p>良好的编程风格，可以增强程序的可读性，一个结构清晰的程序，你会更容易从中发现错误。另一方面，当程序发生变化时，很可能引入新的bug，良好的编程风格可以减少这种bug的出现。下面是与编程风格相关的一些措施。</p>
<blockquote>
<p><strong>风格指南:</strong><br>找一份你使用的编程语言的风格指南，例如Google的编程语言风格指南系列，Python的PEP8，并一直遵守这份指南的内容，如果有自动化工具帮助你保持这种风格，那再好不过。</p>
<p><strong>最佳实践:</strong><br>寻找你所使用语言的最佳实践，他们可读性强，经过了大量实践的考验，被广泛接受，所以尽可能多地使用他们。</p>
<p><strong>起一个好名字:</strong><br>变量，函数名，类名，都需要一个好名字。程序本身是对解决方案的一种描述，一个好的名字会增强这种描述性，也会让你的思维集中于解决方案，同时让其它人更容易理解你的解决方案。</p>
<p><strong>不要直接使用常量:</strong><br>在程序中直接使用的常量，一般被称为 Magic Numbers， 一方面它不利于其它程序员对程序的理解，因为没有人知道这个常量代表什么。另一方面，多个常量之间可能是有关系的，直接使用常量根本反应不出这种关系。</p>
<p><strong>同一变量名不要有多种含义:</strong><br>首先这种做法降低了可读性，一个变量前面一个含义，后面一个含义，这会给阅读程序的人带来困扰。</p>
<p><strong>尽可能保证变量作用域小:</strong><br>尽量减少变量定义的点与变量最后一次使用的点之间的跨度，这样可以使变量与其相关代码变得紧凑，提高可读性，不用在使用变量时再去很多的地方查看其它引用。</p>
<p><strong>保证函数短小精悍:</strong><br>过长的函数会让读者陷入细节的泥潭，还需要前后来回看才能明白前面一大段和后面一大段代码的关系。将函数分解，然后给函数起一个好名字，读者马上就能明白这段代码在做什么。</p>
</blockquote>
<h2 id="提高应变能力"><a href="#提高应变能力" class="headerlink" title="提高应变能力"></a>提高应变能力</h2><blockquote>
<p>程序应对变化的能力强，可扩展性就强，也更容易在变化时保证正确性，这样的程序可维护性强。下面是一些提高程序应变能力的措施。</p>
<p><strong>不要使用常量:</strong><br>不要使用常量的另一个原因在于常量可能变化，如果程序中多次引入了这个常量，那么一旦这个常量要发生变化，就需要同时改动许多地方，这时候，如果有些地方没有改，就会使程序不一致，可能引入bug。</p>
<p><strong>同一变量名不要有多种含义:</strong><br>同一变量名不要有多种含义另一个原因在于，多种含义之间可能会相互影响，第一次写程序时你可能记得这些影响，但是以后对程序进行改动的时候，你可能就忘记了。例如函数内一段代码执行后，索引i 的值等于一个长度，但是这段代码后，你没有将i赋值给另一个变量len，而是直接使用它。等过一段时间后，你或者其它人修改这段程序时，很可能忘了这段代码执行后i的值需要等于一个长度，因为这是一种隐式的约定，所以很容易被忽视。</p>
<p><strong>尽可能保证变量作用域小:</strong><br>保证变量作用域小也有利于重构。当一个函数变得很长时，你可能需要将它分解成多个函数，这时候，如果变量跨度小，就可以很方便地提取函数，不用来回查找与此函数相关的变量的引用。</p>
<p><strong>减少代码重复:</strong><br>如果有一段代码在很多地方重复，这就告诉你，需要把他们提取成一个函数。因为代码的重复意味着这是一块独立的逻辑，独立的逻辑可以抽象成一个函数。另一方面，一旦这段逻辑需要发生变化，只需要修改这个函数就可以了，不需要把所有地方都手动修改一遍。</p>
<p><strong>数据驱动:</strong><br>数据驱动的意思是用数据表示来代替程序逻辑。例如，我们需要一个程序，判断某个月有几天，在实现时，最好用一个数组表示各个月的天数，需要哪个月直接查询就好，而不要使用大量的if语句来作逻辑判断。这只是一个小例子，它提醒我们，如果程序中含有大量判断语句，就应该想一想，能不能用数据来驱动逻辑，这样需要修改的时候，我们直接修改数据就好，而不用修改程序逻辑。</p>
</blockquote>
<p>我曾经接手过一个项目，这个项目其实是一个工具集，根据用户的选择，调用不同的工具。原始的代码里，就使用了大量if语句，并且每个工具其实调用方式和代码都很相似。这样，我每次添加新工具时，就需要找到多个if语句块，作相应修改。如果用数据驱动的话，我们完全可以去掉这些if语句，在用户的选择与工具之间建立对应关系，这样每当新添加工具时，只需要把工具加到系统里，系统会根据这个表直接找到这个工具。这其实和之前举的盒子的例子很相似，添加新工具时，只需要把工具插到盒子上的槽上，根本不用打开盒子。这就大大提高了程序的可扩展性。</p>
<h2 id="控制复杂度"><a href="#控制复杂度" class="headerlink" title="控制复杂度"></a>控制复杂度</h2><p>要保证软件的高质量，很重要的一方面在于控制复杂度。控制复杂度的一个很重要的手段在于分解复杂的事物。我们之所以觉得一个事物复杂，是因为同一时间需要关心的事情太多，把复杂事物分解后，每次我们只需要关心很少的事情，这样就控制住了复杂度。</p>
<blockquote>
<p>不要使函数或类过大<br>如果一个函数或类过大，他们会变得过分复杂，你同一时间需要关心许多细节。将函数或类变小之后，你的思维在一段时间内可以集中在同一个抽象层次，而不必过于深入其细节，这样更容易发现程序中的缺陷，因为你每次只需要关心很少的事情。在最高层，你只需要关心模块之间的关系，关心算法的流程，不必关心模块内部的事情。在最低层，你只需要关心一个模块内部的事情，而不必关心其它事情。</p>
<p>不要使函数参数过多<br>函数参数过多可能说明这个函数负责了太多的事情，你需要将这个函数分解。另一方面，你需要从逻辑上考虑，这些参数是不是一个整体，如果是一个整体，那么直接传过来一个结构体，或者传过来一个对象，是不是更合适？</p>
<p>不要使抽象层次过多<br>如果一个函数或类被分解为过多的抽象层次，在模块内部，你确实只需要关心很小的事情，但是这时候，由于模块过多，抽象层次过深，他们之间的关系又使复杂度增长起来。</p>
</blockquote>
<h2 id="使用自动化工具"><a href="#使用自动化工具" class="headerlink" title="使用自动化工具"></a>使用自动化工具</h2><p>自动化工具迫使我们养成良好的编程习惯，而且不容易出错。再次强调:</p>
<p><code>工具越是使用方便，你越会频繁使用它。</code><br>所以，尽可能地让你的工具使用便捷。<br>例如，使用一些静态检测工具在编辑时自动帮助你检测程序的不良风格；使用重构工具帮助你重构；使用自动化测试工具在保存时自动运行测试等等。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>没有什么事情是一成不变的，所有的法则都需要考虑具体的情况。如果你要用一个法则，需要真正明白自己为什么要用，需要去权衡，而不要为了能用上这个法则而生搬硬套。</p>
<p>好好问问自己：</p>
<blockquote>
<ul>
<li>变化真的存在么?</li>
<li>真的需要抽象么？</li>
<li>真的需要面向对象么？</li>
<li>真的xxx么？</li>
</ul>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>这篇文章是我这段时间阅读过一些书后的想法，书目有:</p>
<blockquote>
<ul>
<li>代码大全(Code Complete)</li>
<li>重构——改善既有代码的设计(Refactoring Improving the Design of Existing Code)</li>
<li>程序设计实践(The Proactice of Programming)</li>
</ul>
</blockquote>
<p>在阅读这些书的同时，我还在维护其它人的代码，做自己的个人项目。在阅读的过程中，我会不断地想到我做的项目哪里有问题，可以用书中提到的方法去修改，因此印象深刻。这些书单纯读也非常有好处，但是如果可以结合到自己的项目中，会有更大裨益。因为只有产生了强烈的共鸣，才能保证真正理解了一个东西。</p>
<p>上面提到的一些措施，都是我遇到过的，所以印象比较深刻，这几本书中还有大量提高程序质量的方法，我这里只是一个引子，希望给有心人打开一扇窗户。</p>
<p>原文链接 : <a href="http://minixalpha.github.io/%E6%80%9D%E6%83%B3/2014/01/13/write_high_quality_program.html" target="_blank" rel="noopener">Minixalpha Blog</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> tips </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心得 </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown学习入门]]></title>
      <url>/posts/417703024/</url>
      <content type="html"><![CDATA[<p><strong>锋利的Markdown：</strong></p>
<p>当前很多博客、论坛都采用Markdown作为发文的首选编辑器，Markdown语言使用起来语法简单、易上手，利于格式排版，而且还易于阅读。</p>
<a id="more"></a>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>&emsp;&emsp;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>&emsp;&emsp;Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在换行等细节上也有改动。</p>
<h2 id="为什么使用-Markdown"><a href="#为什么使用-Markdown" class="headerlink" title="为什么使用 Markdown"></a>为什么使用 Markdown</h2><blockquote>
<ul>
<li>语法简单、易于上手</li>
<li>格式排版方便，效率高</li>
<li>看上去不错，易于阅读</li>
<li>既然看上去不错，为什么不去试试呢~~~</li>
</ul>
</blockquote>
<h2 id="如何使用-Markdonw"><a href="#如何使用-Markdonw" class="headerlink" title="如何使用 Markdonw"></a>如何使用 Markdonw</h2><h3 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h3><p><strong>显示效果：</strong></p>
<blockquote>
<p><span style="font-size: 40px">一级标题</span><br><span style="font-size: 30px">二级标题</span><br><span style="font-size: 20px">三级标题</span></p>
</blockquote>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><strong>显示效果：</strong></p>
<blockquote>
<ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
</blockquote>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 列表一</span><br><span class="line">* 列表二</span><br><span class="line">* 列表三</span><br></pre></td></tr></table></figure>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><strong>显示效果：</strong></p>
<blockquote>
<p>来试试<code>Markdown</code>吧</p>
</blockquote>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">来试试&#96;Markdown&#96;吧</span><br></pre></td></tr></table></figure>
<h3 id="代码块引用"><a href="#代码块引用" class="headerlink" title="代码块引用"></a>代码块引用</h3><p><strong>显示效果：</strong></p>
<blockquote>
<p>def hello():<br>print ‘hello, world’</p>
</blockquote>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;python</span><br><span class="line">def hello(): </span><br><span class="line">print &#39;hello, world&#39;</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<h3 id="文字引用"><a href="#文字引用" class="headerlink" title="文字引用"></a>文字引用</h3><p><strong>显示效果：</strong></p>
<blockquote>
<p>春 眠 不 觉 晓，<br>处 处 闻 啼 鸟。<br>夜 来 风 雨 声，<br>花 落 知 多 少。</p>
</blockquote>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 春 眠 不 觉 晓，</span><br><span class="line">&gt; 处 处 闻 啼 鸟。</span><br><span class="line">&gt; 夜 来 风 雨 声， </span><br><span class="line">&gt; 花 落 知 多 少。</span><br></pre></td></tr></table></figure>
<h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ul>
<li>斜体</li>
</ul>
<p><strong>显示效果：</strong></p>
<p>这是一个<em>斜体</em></p>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个*斜体*</span><br></pre></td></tr></table></figure>
<ul>
<li>粗体</li>
</ul>
<p><strong>显示效果：</strong></p>
<p>这是一个<strong>粗体</strong></p>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个**粗体**</span><br></pre></td></tr></table></figure>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li>网页链接</li>
</ul>
<p><strong>显示效果：</strong></p>
<p>参见Wiki词条<a href="http://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">markdown</a></p>
<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见Wiki词条[Markdown](http:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;Markdown)</span><br></pre></td></tr></table></figure>
<ul>
<li>图片</li>
</ul>
<p><strong>显示效果：</strong></p>
<div style="text-align: center;"><br><img src="https://brucekong-com.gitee.io/images/Wikipedia-logo.png" alt="Wikipedia_logo"><br></div>

<p><strong>代码演示：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Wikipedia_logo](https:&#x2F;&#x2F;brucekong-com.gitee.io&#x2F;images&#x2F;Wikipedia-logo.png)</span><br></pre></td></tr></table></figure>
<p>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 写作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android NDK学习入门教程]]></title>
      <url>/posts/1191879354/</url>
      <content type="html"><![CDATA[<p><strong>高效的Android NDK开发：</strong></p>
<p>为了开发的APK更加安全，防止其反编译；为了利用更高效的C/C++库，提高运行速度；为了更好的移植你的APP，应用在多平台上，请跟我一起使用Android NDK吧！</p>
<a id="more"></a>
<p>&emsp;&emsp;Android的NDK开发入门指南.首先说为什么写Android项目要用到NDK开发，这里简单介绍一下其中优点：使用Android NDK主要就是为了提升应用的性能,对于那些对性能要求比较高的app 而言可以使用Android NDK,同时NDK绕过了Android的虚拟机的限制,可以使用一些更加底层的方法或是权限,但是使用Android NDK无论设计的多好,都会增加app的复杂性。</p>
<p>&emsp;&emsp;但是这里我们只是单纯的说一下怎么通过Android进行NDK编程，而不去探讨更深层次的内容，创建一个Android NDK项目一般遵循一下步骤：</p>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><blockquote>
<ul>
<li>Version : 1.0</li>
<li>Development platform : Android Studio 1.4 preview2</li>
<li>Gradle Version : 2.5</li>
<li>Gradle Plugin Version : 1.3.1</li>
</ul>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>1.创建一个空项目;<br>2.在配置<code>NDK</code>路径;<br>3.在入口<code>Activity</code>中定义一个<code>native</code>方法;<br>4.利用<code>javah</code>生成<code>c</code>的头文件;<br>5.在<code>jni</code>目录下新建一个<code>c</code>文件;<br>6.引用<code>so</code>文件（没看到<code>so</code>文件）;<br>7.加载<code>so</code>文件;<br>8.配置布局文件和入口文件。</p>
</blockquote>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>创建一个空的<code>project</code>；<br>在<code>local.properties</code>中配置<code>NDK</code>路径：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ndk.dir=D\:\\ComSoftwares\\android-ndk</span><br><span class="line">sdk.dir=D\:\\ComSoftwares\\android-sdk</span><br></pre></td></tr></table></figure>
<p>在入口<code>Activity</code>中定义一个<code>native</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getStringFromNative</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>利用<code>javah</code>生成<code>c</code>文件：<br>&emsp;&emsp;根据项目路径和编译环境写出下面功能命令行，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -d jni -classpath D:\ComSoftwares\android-sdk\platforms\android-22\android.jar;..\..\build\intermediates\classes\debug com.ndktest.MainActivity</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在Android Studio中的Terminal控制台中先用<code>cd ../../</code>返回到前两级文件夹，粘贴上面的长串代码，回车执行。会在<code>jni</code>中生成相应的头文件:<code>com_ndktest_MainActivity.h</code>.<br>&emsp;&emsp;打开<code>com_ndktest_MainActivity.h</code>可以看到：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_ndktest_MainActivity */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_ndktest_MainActivity</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_ndktest_MainActivity</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_ABOVE_CLIENT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_ABOVE_CLIENT 8L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_ADJUST_WITH_ACTIVITY</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_ADJUST_WITH_ACTIVITY 128L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_ALLOW_OOM_MANAGEMENT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_ALLOW_OOM_MANAGEMENT 16L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_AUTO_CREATE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_AUTO_CREATE 1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_DEBUG_UNBIND</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_DEBUG_UNBIND 2L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_IMPORTANT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_IMPORTANT 64L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_NOT_FOREGROUND</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_NOT_FOREGROUND 4L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_BIND_WAIVE_PRIORITY</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_BIND_WAIVE_PRIORITY 32L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_CONTEXT_IGNORE_SECURITY</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_CONTEXT_IGNORE_SECURITY 2L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_CONTEXT_INCLUDE_CODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_CONTEXT_INCLUDE_CODE 1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_CONTEXT_RESTRICTED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_CONTEXT_RESTRICTED 4L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_MODE_APPEND</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_MODE_APPEND 32768L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_MODE_ENABLE_WRITE_AHEAD_LOGGING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_MODE_ENABLE_WRITE_AHEAD_LOGGING 8L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_MODE_MULTI_PROCESS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_MODE_MULTI_PROCESS 4L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_MODE_PRIVATE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_MODE_PRIVATE 0L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_MODE_WORLD_READABLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_MODE_WORLD_READABLE 1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_MODE_WORLD_WRITEABLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_MODE_WORLD_WRITEABLE 2L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_DEFAULT_KEYS_DIALER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_DEFAULT_KEYS_DIALER 1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_DEFAULT_KEYS_DISABLE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_DEFAULT_KEYS_DISABLE 0L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_GLOBAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_GLOBAL 4L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_LOCAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_DEFAULT_KEYS_SEARCH_LOCAL 3L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_DEFAULT_KEYS_SHORTCUT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_DEFAULT_KEYS_SHORTCUT 2L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_RESULT_CANCELED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_RESULT_CANCELED 0L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_RESULT_FIRST_USER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_RESULT_FIRST_USER 1L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> com_ndktest_MainActivity_RESULT_OK</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> com_ndktest_MainActivity_RESULT_OK -1L</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_ndktest_MainActivity</span></span><br><span class="line"><span class="comment"> * Method:    getStringFromNative</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_ndktest_MainActivity_getStringFromNative</span><br><span class="line">  (JNIEnv *, jobject);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>在<code>jni</code>中新建一个<code>c</code>文件，将名字命名为：<code>main.c</code>,输入以下内容:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Administrator on 2015/8/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ndktest_MainActivity.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_ndktest_MainActivity</span></span><br><span class="line"><span class="comment"> * Method:    getStringFromNative</span></span><br><span class="line"><span class="comment"> * Signature: ()Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_ndktest_MainActivity_getStringFromNative</span><br><span class="line">        (JNIEnv * env, jobject obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"I'm comes from to Native Function!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果编译出错，请在jni文件夹中新建一个空的<code>.c</code>文件，比如<code>utils.c</code>。在此我没有碰到错误，所以没有添加空文件</p>
<p>在app目录下的<code>build.gradle</code>中设置库文件名（生成的<code>so</code>文件名–但是我在项目中并未看到有<code>so</code>文件生成）;<br>&emsp;&emsp;找到<code>defaultConfig</code>项，添加以下内容：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ndk&#123;  </span><br><span class="line">    moduleName <span class="string">"MyJni"</span>  <span class="comment">//设置库(so)文件名称  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加载<code>so</code>文件:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;  </span><br><span class="line">    System.loadLibrary(<span class="string">"MyJni"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置布局文件和入口文件<br>&emsp;&emsp;在此贴出布局的完整代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/myJni"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MainActivity的完整代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ndktest;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView tv=<span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tv=(TextView)findViewById(R.id.myJni);</span><br><span class="line">        tv.setText(getStringFromNative());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getStringFromNative</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"MyJni"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>&emsp;&emsp;编译运行可以看到从native方法传过来的值：</p>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/ndk.png" alt="ndk"></div><br><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git安装与配置]]></title>
      <url>/posts/3219987363/</url>
      <content type="html"><![CDATA[<p><strong>史上最好用的代码托管工具：</strong></p>
<p>说到代码托管工具，Git绝对是迄今最好用的，它不论项目大小都适用，而且每一个Git克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。如果让我给你一个建议，那就是能用Git就不要使用其他（不偏心，谁用谁知道）。</p>
<a id="more"></a>
<h2 id="Git概念"><a href="#Git概念" class="headerlink" title="Git概念"></a>Git概念</h2><p>Git 是一款免费的、开源的、分布式的版本控制系统。旨在快速高效地处理无论规模大小的任何软件工程。每一个Git克隆都是一个完整的文件库，含有全部历史记录和修订追踪能力，不依赖于网络连接或中心服务器。其最大特色就是“分支”及“合并”操作非常快速、简便。</p>
<h2 id="Git的优势"><a href="#Git的优势" class="headerlink" title="Git的优势"></a>Git的优势</h2><ul>
<li>版本库本地化，支持离线提交，相对独立不影响协同开发；</li>
<li>更少的“仓库污染”；</li>
<li>把内容按元数据方式存储，完整克隆版本库；</li>
<li>支持快速切换分支方便合并，比较合并性能好；</li>
<li>布式版本库，无单点故障，内容完整性好。</li>
</ul>
<h2 id="Git安装与配置"><a href="#Git安装与配置" class="headerlink" title="Git安装与配置"></a>Git安装与配置</h2><p>这里默认你已经有了Github账户，如果没有的话，点击<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">注册</a>去获取一个即可。这里以Windows演示一下Git的安装与配置(以github为例，小伙伴要看准了哦)：</p>
<ul>
<li>下载Git，进入<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>，下载对应平台版本的安装包；</li>
<li>安装Git并配置环境变量；<br>安装Git时会自动将Git配置到环境变量的PATH中，打开Git Bash输入git测试一下，是否安装成功；</li>
<li>打开Git Bash配置用户变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 每一行都是一条命令，其中$是命令行的意思，不需要输入$，另外每行的最后的参数也可以不加引号</span><br><span class="line">$ git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">$ git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li>
<li>生成SSH Key并将公钥放置到Github上；<br>在Git Bash中输入以下内容，一路回车即可；<br><code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code><br>打开<code>C:\Users\Administrator\.ssh</code>目录，用记事本打开<code>id_rsa.pub</code>文件，打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH and GPG Keys</a>新建一个SSH Key，将记事本中的内容复制到Key对话框中，保存即可；</li>
<li>测试SSH Key是否添加成功；<br>回到系统，打开Git Bash，输入以下内容，回车：<br><code>ssh -T git@github.com</code><br>出现有 <em>You’ve successfully authenticated</em> 的字样，就表示已经添加成功。</li>
</ul>
<p><strong><em>这里扩展一下，如果使用的是coding.net，则需要测试 <code>$ ssh -T git@git.coding.net</code> ，如果使用的是gitee.com或者git.oschina.com，则需要测试 <code>$ ssh -T git@gitee.com</code>或者<code>$ ssh -T git@git.oschina.net</code> ，不同的域名，给予的提示就不一样了 </em></strong></p>
<h2 id="Git最常用命令"><a href="#Git最常用命令" class="headerlink" title="Git最常用命令"></a>Git最常用命令</h2><ul>
<li>git init</li>
<li>git add</li>
<li>git commit</li>
<li>git push</li>
<li>git pull</li>
<li>git clone</li>
<li>git status</li>
<li>git fetch</li>
<li>git stash</li>
<li>git stash pop</li>
<li>git branch</li>
<li>git checkout</li>
</ul>
<p>下面就可以正常使用Github了，可以使用<code>git init</code>初始化一个仓库，使用<code>git add</code>方法添加文件到仓库，使用<code>git commit</code>提交文件到本地仓库，使用<code>git push</code>提交本地仓库到Git服务器上，使用<code>git pull</code>拉取Git服务器上的代码，使用<code>git clone</code>来克隆服务器上的代码，以及其他高级用法，待后续… hava a good time！<br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a></p>
<div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 版本管理 </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于GIS的团队管理系统的简介]]></title>
      <url>/posts/4243991381/</url>
      <content type="html"><![CDATA[<p><strong>基于地图的移动团队管理系统：</strong></p>
<p>团队管理已经从传统的文字通讯，变成了基于地图的移动团队管理系统，让队员实时显示在地图上，系统使用期间还实时上传位置到服务器，便于管理者监督、管理、统计和分析。</p>
<a id="more"></a>
<h2 id="什么是TeamManager"><a href="#什么是TeamManager" class="headerlink" title="什么是TeamManager"></a>什么是TeamManager</h2><div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team.png" alt="team"></div>

<p>&emsp;&emsp;基于GIS的团队管理Android应用，本系统以Android为移动端平台，采用B/S架构进行Android客户端与服务器端开发，调用百度地图API进行地图开发，综合利用移动端定位技术和数据库技术、移动客户端与服务器端通信技术、WCF技术等实现了系统的各项功能。该系统主要实现的功能包括在实现传统团队管理的任务分发、日志记录、即时通讯的功能基础上，结合移动GIS技术实现对团队内部所有成员的准确实时追踪定位、轨迹回放、周边查询、紧急救援路线导航，同时团队管理员可以实现对内部成员的实时监控和轨迹回放等操作。</p>

<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul>
<li>Version : 1.0</li>
<li>Development platform : Android Studio 1.3</li>
<li>Gradle Version : 2.5</li>
<li>Gradle Plugin Version : 1.3.0</li>
</ul>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="loginview">登录界面</h3>

<ul>
<li>包括头像，第一次登录时默认的是系统图标</li>
<li>密码输入窗口</li>
<li>忘记密码功能按钮</li>
<li>注册功能按钮<br></li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team-login.gif" alt="Login"></div>

<h3 id="mapview">地图界面</h3>

<ul>
<li>显示当前位置信息</li>
<li>切换显示的地图图层》普通地图 或 遥感图像</li>
<li>是否记录运动轨迹</li>
<li>放大和缩小</li>
<li>查看缩放比例</li>
<li>查找某地区的某位置<br><br></li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team-map.gif" alt="Map"></div>

<h3 id="teamview">团队界面</h3>

<ul>
<li>查找想要添加的团队</li>
<li>创建团队</li>
<li>管理员查看并管理团队信息，比如设置位置共享，解散团队（创建者）</li>
<li>创建或查看公告</li>
<li>创建或查看任务</li>
<li>查看团队地图，可以查看到团队中启用位置共享的成员位置</li>
<li>管理团队成员，比如：创建管理员</li>
<li>团队聊天</li>
<li>邀请好友加入当前团队</li>
<li>管理员可以监控团队成员信息<br><br></li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team-team.gif" alt="Team"></div>

<h3 id="chatview">通讯界面</h3>

<ul>
<li>查找好友，查看或进行聊天</li>
<li>聊天<br><br></li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team-chat.gif" alt="Chat"></div>

<h3 id="meview">个人信息</h3>

<ul>
<li>查看或修改个人信息</li>
<li>签到，签出</li>
<li>我的任务</li>
<li>我的日志</li>
<li>我的日程计划</li>
<li>我的轨迹</li>
<li>我的警示点</li>
<li>我的兴趣点</li>
<li>我的兴趣点热力图<br><br></li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team-me.gif" alt="Me"></div>

<h3 id="totalview">整个录屏内容</h3>

<ul>
<li>包含了上面全部的录制过程<br></li>
</ul>
<div style="text-align: center;"><img src="https://brucekong-com.gitee.io/images/team-all.gif" alt="Total"> </div><br>如果有不明白的，欢迎留言或者给我 <a href=mailto:kongbin0325@hotmail.com>发邮件[Send Email]</a><br><div style="text-align: center;padding: 0; margin: 0;"><br>    <img class="wechat-qrcode"  src="https://brucekong-com.gitee.io/images/wechat-blog.png" alt="关注公众号"><br></div>
]]></content>
      
        <categories>
            
            <category> languages </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> GIS </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我叫<strong>Bruce Kong</strong>，欢迎大家来到我的地盘。</p>
<p>我是地理信息专业大家庭的一份子，地理信息圈子小，如果有熟人路过，请自觉绕道~</p>
<p>工作三年了，曾去过浙江，然又转回山东，最终定居在济南，一直从事着和专业对口的工作，虽有万千，但求平安。</p>
<p>工作这些年，也做过不少项目，特别是从事前端工作，各种框架层出不穷，像Angular、Vue、React、Node等等，说不定下一秒就会出现新技术，然而这些都不重要，不重要，不重要，重要的是能搬得起砖，吃得了饭。</p>
<p>老话说：人往高处走水往低处流。在拼搏的年纪不能窝在舒适的港湾，需要风吹雨打的磨炼，需要千锤百炼的敲打，有些棱角就是需要磨平，有些跟头就是要栽一下，总是在曲折中前进，逆境中前行。</p>
<p>不再少年的你，加油努力吧，一切为了更加美好的明天！</p>
]]></content>
    </entry>
    
  
</search>
